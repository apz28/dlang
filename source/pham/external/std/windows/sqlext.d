/********************************************************
*                                                       *
*   Copyright (C) Microsoft. All rights reserved.       *
*                                                       *
********************************************************/

//-----------------------------------------------------------------------------
// File:            sqlext.h
//
// Contents:        This is the include for applications using the Microsoft SQL Extensions
//
// Comments:
//
//-----------------------------------------------------------------------------

module pham.external.std.windows.sqlext;

version(Windows):
extern (Windows):
@nogc:
nothrow:

version(ANSI)
{
    version = Ansicode;
}
else
{
    version = Unicode;
}

import pham.external.std.windows.sql;
import pham.external.std.windows.sqltypes;
public import pham.external.std.windows.sqlucode;

version(Unicode)
{
    enum SQL_SQLSTATE_SIZE = 10; /* size of SQLSTATE */
    enum SQL_SQLSTATE_SIZE_NULL = SQL_SQLSTATE_SIZE + 2; 
}
else
{
    enum SQL_SQLSTATE_SIZE = 5; /* size of SQLSTATE */
    enum SQL_SQLSTATE_SIZE_NULL = SQL_SQLSTATE_SIZE + 1; 
}
alias SQLSTATE = ubyte[SQL_SQLSTATE_SIZE_NULL];

enum SQL_MAX_DSN_LENGTH = 32; /* maximum data source name size */

enum SQL_MAX_OPTION_STRING_LENGTH = 256;

/* return code SQL_NO_DATA_FOUND is the same as SQL_NO_DATA */

enum SQL_NO_DATA_FOUND = SQL_NO_DATA;

/* an end handle type */
enum SQL_HANDLE_SENV = 5;

/* env attribute */
enum SQL_ATTR_ODBC_VERSION = 200;
enum SQL_ATTR_CONNECTION_POOLING = 201;
enum SQL_ATTR_CP_MATCH = 202;

/* values for SQL_ATTR_CONNECTION_POOLING */
enum SQL_CP_OFF = 0UL;
enum SQL_CP_ONE_PER_DRIVER = 1UL;
enum SQL_CP_ONE_PER_HENV = 2UL;
enum SQL_CP_DRIVER_AWARE = 3UL;
enum SQL_CP_DEFAULT = SQL_CP_OFF;

/* values for SQL_ATTR_CP_MATCH */
enum SQL_CP_STRICT_MATCH = 0UL;
enum SQL_CP_RELAXED_MATCH = 1UL;
enum SQL_CP_MATCH_DEFAULT = SQL_CP_STRICT_MATCH;

/* values for SQL_ATTR_ODBC_VERSION */
enum SQL_OV_ODBC2 = 2UL;
enum SQL_OV_ODBC3 = 3UL;

// new values for SQL_ATTR_ODBC_VERSION 
// From ODBC 3.8 onwards, we should use <major version> * 100 + <minor version>
enum SQL_OV_ODBC3_80 = 380UL;

/* connection attributes */
enum SQL_ACCESS_MODE = 101;
enum SQL_AUTOCOMMIT = 102;
enum SQL_LOGIN_TIMEOUT = 103;
enum SQL_OPT_TRACE = 104;
enum SQL_OPT_TRACEFILE = 105;
enum SQL_TRANSLATE_DLL = 106;
enum SQL_TRANSLATE_OPTION = 107;
enum SQL_TXN_ISOLATION = 108;
enum SQL_CURRENT_QUALIFIER = 109;
enum SQL_ODBC_CURSORS = 110;
enum SQL_QUIET_MODE = 111;
enum SQL_PACKET_SIZE = 112;

/* connection attributes with new names */
enum SQL_ATTR_ACCESS_MODE = SQL_ACCESS_MODE;
enum SQL_ATTR_AUTOCOMMIT = SQL_AUTOCOMMIT;
enum SQL_ATTR_CONNECTION_TIMEOUT = 113;
enum SQL_ATTR_CURRENT_CATALOG = SQL_CURRENT_QUALIFIER;
enum SQL_ATTR_DISCONNECT_BEHAVIOR = 114;
enum SQL_ATTR_ENLIST_IN_DTC = 1207;
enum SQL_ATTR_ENLIST_IN_XA = 1208;
enum SQL_ATTR_LOGIN_TIMEOUT = SQL_LOGIN_TIMEOUT;
enum SQL_ATTR_ODBC_CURSORS = SQL_ODBC_CURSORS;
enum SQL_ATTR_PACKET_SIZE = SQL_PACKET_SIZE;
enum SQL_ATTR_QUIET_MODE = SQL_QUIET_MODE;
enum SQL_ATTR_TRACE = SQL_OPT_TRACE;
enum SQL_ATTR_TRACEFILE = SQL_OPT_TRACEFILE;
enum SQL_ATTR_TRANSLATE_LIB = SQL_TRANSLATE_DLL;
enum SQL_ATTR_TRANSLATE_OPTION = SQL_TRANSLATE_OPTION;
enum SQL_ATTR_TXN_ISOLATION = SQL_TXN_ISOLATION;

enum SQL_ATTR_CONNECTION_DEAD = 1209; /* GetConnectAttr only */

/*  ODBC Driver Manager sets this connection attribute to a unicode driver
    (which supports SQLConnectW) when the application is an ANSI application
    (which calls SQLConnect, SQLDriverConnect, or SQLBrowseConnect).
    This is SetConnectAttr only and application does not set this attribute
    This attribute was introduced because some unicode driver's some APIs may
    need to behave differently on ANSI or Unicode applications. A unicode
    driver, which  has same behavior for both ANSI or Unicode applications,
    should return SQL_ERROR when the driver manager sets this connection
    attribute. When a unicode driver returns SQL_SUCCESS on this attribute,
    the driver manager treates ANSI and Unicode connections differently in
    connection pooling.
*/
enum SQL_ATTR_ANSI_APP = 115;

enum SQL_ATTR_RESET_CONNECTION = 116;
enum SQL_ATTR_ASYNC_DBC_FUNCTIONS_ENABLE = 117;

// Connection attribute 118 is defined in sqlspi.h

enum SQL_ATTR_ASYNC_DBC_EVENT = 119;

// Connection attribute 120 and 121 are defined in sqlspi.h

/* SQL_CONNECT_OPT_DRVR_START is not meaningful for 3.0 driver */
// enum SQL_CONNECT_OPT_DRVR_START = 1000;

/* SQL_ACCESS_MODE options */
enum SQL_MODE_READ_WRITE = 0UL;
enum SQL_MODE_READ_ONLY = 1UL;
enum SQL_MODE_DEFAULT = SQL_MODE_READ_WRITE;

/* SQL_AUTOCOMMIT options */
enum SQL_AUTOCOMMIT_OFF = 0UL;
enum SQL_AUTOCOMMIT_ON = 1UL;
enum SQL_AUTOCOMMIT_DEFAULT = SQL_AUTOCOMMIT_ON;

/* SQL_LOGIN_TIMEOUT options */
enum SQL_LOGIN_TIMEOUT_DEFAULT = 15UL;

/* SQL_OPT_TRACE options */
enum SQL_OPT_TRACE_OFF = 0UL;
enum SQL_OPT_TRACE_ON = 1UL;
enum SQL_OPT_TRACE_DEFAULT = SQL_OPT_TRACE_OFF;
enum SQL_OPT_TRACE_FILE_DEFAULT = "\\SQL.LOG";

/* SQL_ODBC_CURSORS options */
// SQL_CUR_USE_IF_NEEDED and SQL_CUR_USE_ODBC are deprecated.
// Please use SQL_CUR_USE_DRIVER for cursor functionalities provided by drivers
enum SQL_CUR_USE_IF_NEEDED = 0UL;
enum SQL_CUR_USE_ODBC = 1UL;
enum SQL_CUR_USE_DRIVER = 2UL;
enum SQL_CUR_DEFAULT = SQL_CUR_USE_DRIVER;

/* values for SQL_ATTR_DISCONNECT_BEHAVIOR */
enum SQL_DB_RETURN_TO_POOL = 0UL;
enum SQL_DB_DISCONNECT = 1UL;
enum SQL_DB_DEFAULT = SQL_DB_RETURN_TO_POOL;

/* values for SQL_ATTR_ENLIST_IN_DTC */
enum SQL_DTC_DONE = 0L;

/* values for SQL_ATTR_CONNECTION_DEAD */
enum SQL_CD_TRUE = 1L; /* Connection is closed/dead */
enum SQL_CD_FALSE = 0L; /* Connection is open/available */

/* values for SQL_ATTR_ANSI_APP */
enum SQL_AA_TRUE = 1L; /* the application is an ANSI app */
enum SQL_AA_FALSE = 0L; /* the application is a Unicode app */

/* values for SQL_ATTR_RESET_CONNECTION */
enum SQL_RESET_CONNECTION_YES = 1UL;

/* values for SQL_ATTR_ASYNC_DBC_FUNCTIONS_ENABLE */
enum SQL_ASYNC_DBC_ENABLE_ON = 1UL;
enum SQL_ASYNC_DBC_ENABLE_OFF = 0UL;
enum SQL_ASYNC_DBC_ENABLE_DEFAULT = SQL_ASYNC_DBC_ENABLE_OFF;

/* statement attributes */
enum SQL_QUERY_TIMEOUT = 0;
enum SQL_MAX_ROWS = 1;
enum SQL_NOSCAN = 2;
enum SQL_MAX_LENGTH = 3;
enum SQL_ASYNC_ENABLE = 4;
enum SQL_BIND_TYPE = 5;
enum SQL_CURSOR_TYPE = 6;
enum SQL_CONCURRENCY = 7;
enum SQL_KEYSET_SIZE = 8;
enum SQL_ROWSET_SIZE = 9;
enum SQL_SIMULATE_CURSOR = 10;
enum SQL_RETRIEVE_DATA = 11;
enum SQL_USE_BOOKMARKS = 12;
enum SQL_GET_BOOKMARK = 13; /*      GetStmtOption Only */
enum SQL_ROW_NUMBER = 14; /*      GetStmtOption Only */

/* statement attributes for ODBC 3.0 */
enum SQL_ATTR_ASYNC_ENABLE = SQL_ASYNC_ENABLE;
enum SQL_ATTR_CONCURRENCY = SQL_CONCURRENCY;
enum SQL_ATTR_CURSOR_TYPE = SQL_CURSOR_TYPE;
enum SQL_ATTR_ENABLE_AUTO_IPD = 15;
enum SQL_ATTR_FETCH_BOOKMARK_PTR = 16;
enum SQL_ATTR_KEYSET_SIZE = SQL_KEYSET_SIZE;
enum SQL_ATTR_MAX_LENGTH = SQL_MAX_LENGTH;
enum SQL_ATTR_MAX_ROWS = SQL_MAX_ROWS;
enum SQL_ATTR_NOSCAN = SQL_NOSCAN;
enum SQL_ATTR_PARAM_BIND_OFFSET_PTR = 17;
enum SQL_ATTR_PARAM_BIND_TYPE = 18;
enum SQL_ATTR_PARAM_OPERATION_PTR = 19;
enum SQL_ATTR_PARAM_STATUS_PTR = 20;
enum SQL_ATTR_PARAMS_PROCESSED_PTR = 21;
enum SQL_ATTR_PARAMSET_SIZE = 22;
enum SQL_ATTR_QUERY_TIMEOUT = SQL_QUERY_TIMEOUT;
enum SQL_ATTR_RETRIEVE_DATA = SQL_RETRIEVE_DATA;
enum SQL_ATTR_ROW_BIND_OFFSET_PTR = 23;
enum SQL_ATTR_ROW_BIND_TYPE = SQL_BIND_TYPE;
enum SQL_ATTR_ROW_NUMBER = SQL_ROW_NUMBER; /*GetStmtAttr*/
enum SQL_ATTR_ROW_OPERATION_PTR = 24;
enum SQL_ATTR_ROW_STATUS_PTR = 25;
enum SQL_ATTR_ROWS_FETCHED_PTR = 26;
enum SQL_ATTR_ROW_ARRAY_SIZE = 27;
enum SQL_ATTR_SIMULATE_CURSOR = SQL_SIMULATE_CURSOR;
enum SQL_ATTR_USE_BOOKMARKS = SQL_USE_BOOKMARKS;

enum SQL_ATTR_ASYNC_STMT_EVENT = 29;

/* New defines for SEARCHABLE column in SQLGetTypeInfo */

enum SQL_COL_PRED_CHAR = SQL_LIKE_ONLY;
enum SQL_COL_PRED_BASIC = SQL_ALL_EXCEPT_LIKE;

/* whether an attribute is a pointer or not */
enum SQL_IS_POINTER = -4;
enum SQL_IS_UINTEGER = -5;
enum SQL_IS_INTEGER = -6;
enum SQL_IS_USMALLINT = -7;
enum SQL_IS_SMALLINT = -8;

/* the value of SQL_ATTR_PARAM_BIND_TYPE */
enum SQL_PARAM_BIND_BY_COLUMN = 0UL;
enum SQL_PARAM_BIND_TYPE_DEFAULT = SQL_PARAM_BIND_BY_COLUMN;

/* SQL_QUERY_TIMEOUT options */
enum SQL_QUERY_TIMEOUT_DEFAULT = 0UL;

/* SQL_MAX_ROWS options */
enum SQL_MAX_ROWS_DEFAULT = 0UL;

/* SQL_NOSCAN options */
enum SQL_NOSCAN_OFF = 0UL; /*      1.0 FALSE */
enum SQL_NOSCAN_ON = 1UL; /*      1.0 TRUE */
enum SQL_NOSCAN_DEFAULT = SQL_NOSCAN_OFF;

/* SQL_MAX_LENGTH options */
enum SQL_MAX_LENGTH_DEFAULT = 0UL;

/* values for SQL_ATTR_ASYNC_ENABLE */
enum SQL_ASYNC_ENABLE_OFF = 0UL;
enum SQL_ASYNC_ENABLE_ON = 1UL;
enum SQL_ASYNC_ENABLE_DEFAULT = SQL_ASYNC_ENABLE_OFF;

/* SQL_BIND_TYPE options */
enum SQL_BIND_BY_COLUMN = 0UL;
enum SQL_BIND_TYPE_DEFAULT = SQL_BIND_BY_COLUMN; /* Default value */

/* SQL_CONCURRENCY options */
enum SQL_CONCUR_READ_ONLY = 1;
enum SQL_CONCUR_LOCK = 2;
enum SQL_CONCUR_ROWVER = 3;
enum SQL_CONCUR_VALUES = 4;
enum SQL_CONCUR_DEFAULT = SQL_CONCUR_READ_ONLY; /* Default value */

/* SQL_CURSOR_TYPE options */
enum SQL_CURSOR_FORWARD_ONLY = 0UL;
enum SQL_CURSOR_KEYSET_DRIVEN = 1UL;
enum SQL_CURSOR_DYNAMIC = 2UL;
enum SQL_CURSOR_STATIC = 3UL;
enum SQL_CURSOR_TYPE_DEFAULT = SQL_CURSOR_FORWARD_ONLY; /* Default value */

/* SQL_ROWSET_SIZE options */
enum SQL_ROWSET_SIZE_DEFAULT = 1UL;

/* SQL_KEYSET_SIZE options */
enum SQL_KEYSET_SIZE_DEFAULT = 0UL;

/* SQL_SIMULATE_CURSOR options */
enum SQL_SC_NON_UNIQUE = 0UL;
enum SQL_SC_TRY_UNIQUE = 1UL;
enum SQL_SC_UNIQUE = 2UL;

/* SQL_RETRIEVE_DATA options */
enum SQL_RD_OFF = 0UL;
enum SQL_RD_ON = 1UL;
enum SQL_RD_DEFAULT = SQL_RD_ON;

/* SQL_USE_BOOKMARKS options */
enum SQL_UB_OFF = 0UL;
enum SQL_UB_ON = 1UL;
enum SQL_UB_DEFAULT = SQL_UB_OFF;

/* New values for SQL_USE_BOOKMARKS attribute */
enum SQL_UB_FIXED = SQL_UB_ON;
enum SQL_UB_VARIABLE = 2UL;

/* extended descriptor field */
enum SQL_DESC_ARRAY_SIZE = 20;
enum SQL_DESC_ARRAY_STATUS_PTR = 21;
enum SQL_DESC_AUTO_UNIQUE_VALUE = SQL_COLUMN_AUTO_INCREMENT;
enum SQL_DESC_BASE_COLUMN_NAME = 22;
enum SQL_DESC_BASE_TABLE_NAME = 23;
enum SQL_DESC_BIND_OFFSET_PTR = 24;
enum SQL_DESC_BIND_TYPE = 25;
enum SQL_DESC_CASE_SENSITIVE = SQL_COLUMN_CASE_SENSITIVE;
enum SQL_DESC_CATALOG_NAME = SQL_COLUMN_QUALIFIER_NAME;
enum SQL_DESC_CONCISE_TYPE = SQL_COLUMN_TYPE;
enum SQL_DESC_DATETIME_INTERVAL_PRECISION = 26;
enum SQL_DESC_DISPLAY_SIZE = SQL_COLUMN_DISPLAY_SIZE;
enum SQL_DESC_FIXED_PREC_SCALE = SQL_COLUMN_MONEY;
enum SQL_DESC_LABEL = SQL_COLUMN_LABEL;
enum SQL_DESC_LITERAL_PREFIX = 27;
enum SQL_DESC_LITERAL_SUFFIX = 28;
enum SQL_DESC_LOCAL_TYPE_NAME = 29;
enum SQL_DESC_MAXIMUM_SCALE = 30;
enum SQL_DESC_MINIMUM_SCALE = 31;
enum SQL_DESC_NUM_PREC_RADIX = 32;
enum SQL_DESC_PARAMETER_TYPE = 33;
enum SQL_DESC_ROWS_PROCESSED_PTR = 34;
enum SQL_DESC_ROWVER = 35;
enum SQL_DESC_SCHEMA_NAME = SQL_COLUMN_OWNER_NAME;
enum SQL_DESC_SEARCHABLE = SQL_COLUMN_SEARCHABLE;
enum SQL_DESC_TYPE_NAME = SQL_COLUMN_TYPE_NAME;
enum SQL_DESC_TABLE_NAME = SQL_COLUMN_TABLE_NAME;
enum SQL_DESC_UNSIGNED = SQL_COLUMN_UNSIGNED;
enum SQL_DESC_UPDATABLE = SQL_COLUMN_UPDATABLE;

/* defines for diagnostics fields */
enum SQL_DIAG_CURSOR_ROW_COUNT = -1249;
enum SQL_DIAG_ROW_NUMBER = -1248;
enum SQL_DIAG_COLUMN_NUMBER = -1247;

/* SQL extended datatypes */
enum SQL_DATE = 9;
enum SQL_INTERVAL = 10;
enum SQL_TIME = 10;
enum SQL_TIMESTAMP = 11;
enum SQL_LONGVARCHAR = -1;
enum SQL_BINARY = -2;
enum SQL_VARBINARY = -3;
enum SQL_LONGVARBINARY = -4;
enum SQL_BIGINT = -5;
enum SQL_TINYINT = -6;
enum SQL_BIT = -7;
enum SQL_GUID = -11;

// Driver specific SQL data type defines.
// Microsoft has -150 thru -199 reserved for Microsoft SQL Server Native Client driver usage.
//enum SQL_SS_VARIANT         = -150;
//enum SQL_SS_UDT             = -151;
enum SQL_SS_XML             = -152;
//enum SQL_SS_TABLE           = -153;
enum SQL_SS_TIME2           = -154;
enum SQL_SS_TIMESTAMPOFFSET = -155;

/* interval code */
enum SQL_CODE_YEAR = 1;
enum SQL_CODE_MONTH = 2;
enum SQL_CODE_DAY = 3;
enum SQL_CODE_HOUR = 4;
enum SQL_CODE_MINUTE = 5;
enum SQL_CODE_SECOND = 6;
enum SQL_CODE_YEAR_TO_MONTH = 7;
enum SQL_CODE_DAY_TO_HOUR = 8;
enum SQL_CODE_DAY_TO_MINUTE = 9;
enum SQL_CODE_DAY_TO_SECOND = 10;
enum SQL_CODE_HOUR_TO_MINUTE = 11;
enum SQL_CODE_HOUR_TO_SECOND = 12;
enum SQL_CODE_MINUTE_TO_SECOND = 13;

enum SQL_INTERVAL_YEAR = 100 + SQL_CODE_YEAR;
enum SQL_INTERVAL_MONTH = 100 + SQL_CODE_MONTH;
enum SQL_INTERVAL_DAY = 100 + SQL_CODE_DAY;
enum SQL_INTERVAL_HOUR = 100 + SQL_CODE_HOUR;
enum SQL_INTERVAL_MINUTE = 100 + SQL_CODE_MINUTE;
enum SQL_INTERVAL_SECOND = 100 + SQL_CODE_SECOND;
enum SQL_INTERVAL_YEAR_TO_MONTH = 100 + SQL_CODE_YEAR_TO_MONTH;
enum SQL_INTERVAL_DAY_TO_HOUR = 100 + SQL_CODE_DAY_TO_HOUR;
enum SQL_INTERVAL_DAY_TO_MINUTE = 100 + SQL_CODE_DAY_TO_MINUTE;
enum SQL_INTERVAL_DAY_TO_SECOND = 100 + SQL_CODE_DAY_TO_SECOND;
enum SQL_INTERVAL_HOUR_TO_MINUTE = 100 + SQL_CODE_HOUR_TO_MINUTE;
enum SQL_INTERVAL_HOUR_TO_SECOND = 100 + SQL_CODE_HOUR_TO_SECOND;
enum SQL_INTERVAL_MINUTE_TO_SECOND = 100 + SQL_CODE_MINUTE_TO_SECOND;

/* The previous definitions for SQL_UNICODE_ are historical and obsolete */

enum SQL_UNICODE = SQL_WCHAR;
enum SQL_UNICODE_VARCHAR = SQL_WVARCHAR;
enum SQL_UNICODE_LONGVARCHAR = SQL_WLONGVARCHAR;
enum SQL_UNICODE_CHAR = SQL_WCHAR;

/* C datatype to SQL datatype mapping      SQL types
                                           ------------------- */
enum SQL_C_CHAR = SQL_CHAR;                /* CHAR, VARCHAR, DECIMAL, NUMERIC */
enum SQL_C_LONG = SQL_INTEGER;             /* INTEGER                      */
enum SQL_C_SHORT = SQL_SMALLINT;           /* SMALLINT                     */
enum SQL_C_FLOAT = SQL_REAL;               /* REAL                         */
enum SQL_C_DOUBLE = SQL_DOUBLE;            /* FLOAT, DOUBLE                */
enum SQL_C_NUMERIC = SQL_NUMERIC;
enum SQL_C_DEFAULT = 99;

enum SQL_SIGNED_OFFSET = -20;
enum SQL_UNSIGNED_OFFSET = -22;

/* C datatype to SQL datatype mapping */
enum SQL_C_DATE = SQL_DATE;
enum SQL_C_TIME = SQL_TIME;
enum SQL_C_TIMESTAMP = SQL_TIMESTAMP;
enum SQL_C_TYPE_DATE = SQL_TYPE_DATE;
enum SQL_C_TYPE_TIME = SQL_TYPE_TIME;
enum SQL_C_TYPE_TIMESTAMP = SQL_TYPE_TIMESTAMP;
enum SQL_C_INTERVAL_YEAR = SQL_INTERVAL_YEAR;
enum SQL_C_INTERVAL_MONTH = SQL_INTERVAL_MONTH;
enum SQL_C_INTERVAL_DAY = SQL_INTERVAL_DAY;
enum SQL_C_INTERVAL_HOUR = SQL_INTERVAL_HOUR;
enum SQL_C_INTERVAL_MINUTE = SQL_INTERVAL_MINUTE;
enum SQL_C_INTERVAL_SECOND = SQL_INTERVAL_SECOND;
enum SQL_C_INTERVAL_YEAR_TO_MONTH = SQL_INTERVAL_YEAR_TO_MONTH;
enum SQL_C_INTERVAL_DAY_TO_HOUR = SQL_INTERVAL_DAY_TO_HOUR;
enum SQL_C_INTERVAL_DAY_TO_MINUTE = SQL_INTERVAL_DAY_TO_MINUTE;
enum SQL_C_INTERVAL_DAY_TO_SECOND = SQL_INTERVAL_DAY_TO_SECOND;
enum SQL_C_INTERVAL_HOUR_TO_MINUTE = SQL_INTERVAL_HOUR_TO_MINUTE;
enum SQL_C_INTERVAL_HOUR_TO_SECOND = SQL_INTERVAL_HOUR_TO_SECOND;
enum SQL_C_INTERVAL_MINUTE_TO_SECOND = SQL_INTERVAL_MINUTE_TO_SECOND;
enum SQL_C_BINARY = SQL_BINARY;
enum SQL_C_BIT = SQL_BIT;
enum SQL_C_SBIGINT = SQL_BIGINT + SQL_SIGNED_OFFSET; /* SIGNED BIGINT */
enum SQL_C_UBIGINT = SQL_BIGINT + SQL_UNSIGNED_OFFSET; /* UNSIGNED BIGINT */
enum SQL_C_TINYINT = SQL_TINYINT;
enum SQL_C_SLONG = SQL_C_LONG + SQL_SIGNED_OFFSET; /* SIGNED INTEGER  */
enum SQL_C_SSHORT = SQL_C_SHORT + SQL_SIGNED_OFFSET; /* SIGNED SMALLINT */
enum SQL_C_STINYINT = SQL_TINYINT + SQL_SIGNED_OFFSET; /* SIGNED TINYINT  */
enum SQL_C_ULONG = SQL_C_LONG + SQL_UNSIGNED_OFFSET; /* UNSIGNED INTEGER*/
enum SQL_C_USHORT = SQL_C_SHORT + SQL_UNSIGNED_OFFSET; /* UNSIGNED SMALLINT*/
enum SQL_C_UTINYINT = SQL_TINYINT + SQL_UNSIGNED_OFFSET; /* UNSIGNED TINYINT*/

version(Win64)
    enum SQL_C_BOOKMARK = SQL_C_UBIGINT; /* BOOKMARK        */
else
    enum SQL_C_BOOKMARK = SQL_C_ULONG;   /* BOOKMARK        */

enum SQL_C_GUID = SQL_GUID;

enum SQL_TYPE_NULL = 0;

// base value of driver-specific C-Type (max is 0x7fff)
// define driver-specific C-Type, named as SQL_DRIVER_C_TYPE_BASE, 
// SQL_DRIVER_C_TYPE_BASE+1, SQL_DRIVER_C_TYPE_BASE+2, etc.
enum SQL_DRIVER_C_TYPE_BASE = 0x4000;

// Extended C Types range 4000 and above. Range of -100 thru 200 is reserved by Driver Manager.
enum SQL_C_TYPES_EXTENDED     = 0x04000;
enum SQL_C_SS_TIME2           = SQL_C_TYPES_EXTENDED+0;
enum SQL_C_SS_TIMESTAMPOFFSET = SQL_C_TYPES_EXTENDED+1;

// base value of driver-specific fields/attributes (max are 0x7fff [16-bit] or 0x00007fff [32-bit])
// define driver-specific SQL-Type, named as SQL_DRIVER_SQL_TYPE_BASE, 
// SQL_DRIVER_SQL_TYPE_BASE+1, SQL_DRIVER_SQL_TYPE_BASE+2, etc.
// 
// Please note that there is no runtime change in this version of DM. 
// However, we suggest that driver manufacturers adhere to this range
// as future versions of the DM may enforce these constraints
enum SQL_DRIVER_SQL_TYPE_BASE = 0x4000;
enum SQL_DRIVER_DESC_FIELD_BASE = 0x4000;
enum SQL_DRIVER_DIAG_FIELD_BASE = 0x4000;
enum SQL_DRIVER_INFO_TYPE_BASE = 0x4000;
enum SQL_DRIVER_CONN_ATTR_BASE = 0x00004000; // 32-bit
enum SQL_DRIVER_STMT_ATTR_BASE = 0x00004000; // 32-bit

enum SQL_C_VARBOOKMARK = SQL_C_BINARY;

/* define for SQL_DIAG_ROW_NUMBER and SQL_DIAG_COLUMN_NUMBER */
enum SQL_NO_ROW_NUMBER = -1;
enum SQL_NO_COLUMN_NUMBER = -1;
enum SQL_ROW_NUMBER_UNKNOWN = -2;
enum SQL_COLUMN_NUMBER_UNKNOWN = -2;

/* SQLBindParameter extensions */
enum SQL_DEFAULT_PARAM = -5;
enum SQL_IGNORE = -6;
enum SQL_COLUMN_IGNORE = SQL_IGNORE;
enum SQL_LEN_DATA_AT_EXEC_OFFSET = -100;

extern (D) auto SQL_LEN_DATA_AT_EXEC(T)(auto ref T length)
{
    return -length + SQL_LEN_DATA_AT_EXEC_OFFSET;
}

/* binary length for driver specific attributes */
enum SQL_LEN_BINARY_ATTR_OFFSET = -100;

extern (D) auto SQL_LEN_BINARY_ATTR(T)(auto ref T length)
{
    return -length + SQL_LEN_BINARY_ATTR_OFFSET;
}

/* Defines used by Driver Manager when mapping SQLSetParam to SQLBindParameter
*/
enum SQL_PARAM_TYPE_DEFAULT = SQL_PARAM_INPUT_OUTPUT;
enum SQL_SETPARAM_VALUE_MAX = -1L;

/* SQLColAttributes defines */
enum SQL_COLUMN_COUNT = 0;
enum SQL_COLUMN_NAME = 1;
enum SQL_COLUMN_TYPE = 2;
enum SQL_COLUMN_LENGTH = 3;
enum SQL_COLUMN_PRECISION = 4;
enum SQL_COLUMN_SCALE = 5;
enum SQL_COLUMN_DISPLAY_SIZE = 6;
enum SQL_COLUMN_NULLABLE = 7;
enum SQL_COLUMN_UNSIGNED = 8;
enum SQL_COLUMN_MONEY = 9;
enum SQL_COLUMN_UPDATABLE = 10;
enum SQL_COLUMN_AUTO_INCREMENT = 11;
enum SQL_COLUMN_CASE_SENSITIVE = 12;
enum SQL_COLUMN_SEARCHABLE = 13;
enum SQL_COLUMN_TYPE_NAME = 14;
enum SQL_COLUMN_TABLE_NAME = 15;
enum SQL_COLUMN_OWNER_NAME = 16;
enum SQL_COLUMN_QUALIFIER_NAME = 17;
enum SQL_COLUMN_LABEL = 18;
enum SQL_COLATT_OPT_MAX = SQL_COLUMN_LABEL;

enum SQL_COLATT_OPT_MIN = SQL_COLUMN_COUNT;

/* SQLColAttributes subdefines for SQL_COLUMN_UPDATABLE */
enum SQL_ATTR_READONLY = 0;
enum SQL_ATTR_WRITE = 1;
enum SQL_ATTR_READWRITE_UNKNOWN = 2;

/* SQLColAttributes subdefines for SQL_COLUMN_SEARCHABLE */
/* These are also used by SQLGetInfo                     */
enum SQL_UNSEARCHABLE = 0;
enum SQL_LIKE_ONLY = 1;
enum SQL_ALL_EXCEPT_LIKE = 2;
enum SQL_SEARCHABLE = 3;
enum SQL_PRED_SEARCHABLE = SQL_SEARCHABLE;

/* Special return values for SQLGetData */
enum SQL_NO_TOTAL = -4;

/********************************************/
/* SQLGetFunctions: additional values for   */
/* fFunction to represent functions that    */
/* are not in the X/Open spec.              */
/********************************************/

enum SQL_API_SQLALLOCHANDLESTD = 73;
enum SQL_API_SQLBULKOPERATIONS = 24;
enum SQL_API_SQLBINDPARAMETER = 72;
enum SQL_API_SQLBROWSECONNECT = 55;
enum SQL_API_SQLCOLATTRIBUTES = 6;
enum SQL_API_SQLCOLUMNPRIVILEGES = 56;
enum SQL_API_SQLDESCRIBEPARAM = 58;
enum SQL_API_SQLDRIVERCONNECT = 41;
enum SQL_API_SQLDRIVERS = 71;
enum SQL_API_SQLEXTENDEDFETCH = 59;
enum SQL_API_SQLFOREIGNKEYS = 60;
enum SQL_API_SQLMORERESULTS = 61;
enum SQL_API_SQLNATIVESQL = 62;
enum SQL_API_SQLNUMPARAMS = 63;
enum SQL_API_SQLPARAMOPTIONS = 64;
enum SQL_API_SQLPRIMARYKEYS = 65;
enum SQL_API_SQLPROCEDURECOLUMNS = 66;
enum SQL_API_SQLPROCEDURES = 67;
enum SQL_API_SQLSETPOS = 68;
enum SQL_API_SQLSETSCROLLOPTIONS = 69;
enum SQL_API_SQLTABLEPRIVILEGES = 70;

/*--------------------------------------------*/
/* SQL_API_ALL_FUNCTIONS returns an array     */
/* of 'booleans' representing whether a       */
/* function is implemented by the driver.     */
/*                                            */
/* CAUTION: Only functions defined in ODBC    */
/* version 2.0 and earlier are returned, the  */
/* new high-range function numbers defined by */
/* X/Open break this scheme.   See the new    */
/* method -- SQL_API_ODBC3_ALL_FUNCTIONS      */
/*--------------------------------------------*/

enum SQL_API_ALL_FUNCTIONS = 0; /* See CAUTION above */

/*----------------------------------------------*/
/* 2.X drivers export a dummy function with     */
/* ordinal number SQL_API_LOADBYORDINAL to speed*/
/* loading under the windows operating system.  */
/*                      */
/* CAUTION: Loading by ordinal is not supported */
/* for 3.0 and above drivers.           */
/*----------------------------------------------*/

enum SQL_API_LOADBYORDINAL = 199; /* See CAUTION above */

/*----------------------------------------------*/
/* SQL_API_ODBC3_ALL_FUNCTIONS                  */
/* This returns a bitmap, which allows us to    */
/* handle the higher-valued function numbers.   */
/* Use  SQL_FUNC_EXISTS(bitmap,function_number) */
/* to determine if the function exists.         */
/*----------------------------------------------*/

enum SQL_API_ODBC3_ALL_FUNCTIONS = 999;
enum SQL_API_ODBC3_ALL_FUNCTIONS_SIZE = 250; /* array of 250 words */

extern (D) auto SQL_FUNC_EXISTS(T0, T1)(auto ref T0 pfExists, auto ref T1 uwAPI)
{
    return (*((cast(UWORD*) pfExists) + (uwAPI >> 4)) & (1 << (uwAPI & 0x000F))) ? SQL_TRUE : SQL_FALSE;
}

/************************************************/
/* Extended definitions for SQLGetInfo          */
/************************************************/

/*---------------------------------*/
/* Values in ODBC 2.0 that are not */
/* in the X/Open spec              */
/*---------------------------------*/

enum SQL_INFO_FIRST = 0;
enum SQL_ACTIVE_CONNECTIONS = 0; /* MAX_DRIVER_CONNECTIONS */
enum SQL_ACTIVE_STATEMENTS = 1; /* MAX_CONCURRENT_ACTIVITIES */
enum SQL_DRIVER_HDBC = 3;
enum SQL_DRIVER_HENV = 4;
enum SQL_DRIVER_HSTMT = 5;
enum SQL_DRIVER_NAME = 6;
enum SQL_DRIVER_VER = 7;
enum SQL_ODBC_API_CONFORMANCE = 9;
enum SQL_ODBC_VER = 10;
enum SQL_ROW_UPDATES = 11;
enum SQL_ODBC_SAG_CLI_CONFORMANCE = 12;
enum SQL_ODBC_SQL_CONFORMANCE = 15;
enum SQL_PROCEDURES = 21;
enum SQL_CONCAT_NULL_BEHAVIOR = 22;
enum SQL_CURSOR_ROLLBACK_BEHAVIOR = 24;
enum SQL_EXPRESSIONS_IN_ORDERBY = 27;
enum SQL_MAX_OWNER_NAME_LEN = 32; /* MAX_SCHEMA_NAME_LEN */
enum SQL_MAX_PROCEDURE_NAME_LEN = 33;
enum SQL_MAX_QUALIFIER_NAME_LEN = 34; /* MAX_CATALOG_NAME_LEN */
enum SQL_MULT_RESULT_SETS = 36;
enum SQL_MULTIPLE_ACTIVE_TXN = 37;
enum SQL_OUTER_JOINS = 38;
enum SQL_OWNER_TERM = 39;
enum SQL_PROCEDURE_TERM = 40;
enum SQL_QUALIFIER_NAME_SEPARATOR = 41;
enum SQL_QUALIFIER_TERM = 42;
enum SQL_SCROLL_OPTIONS = 44;
enum SQL_TABLE_TERM = 45;
enum SQL_CONVERT_FUNCTIONS = 48;
enum SQL_NUMERIC_FUNCTIONS = 49;
enum SQL_STRING_FUNCTIONS = 50;
enum SQL_SYSTEM_FUNCTIONS = 51;
enum SQL_TIMEDATE_FUNCTIONS = 52;
enum SQL_CONVERT_BIGINT = 53;
enum SQL_CONVERT_BINARY = 54;
enum SQL_CONVERT_BIT = 55;
enum SQL_CONVERT_CHAR = 56;
enum SQL_CONVERT_DATE = 57;
enum SQL_CONVERT_DECIMAL = 58;
enum SQL_CONVERT_DOUBLE = 59;
enum SQL_CONVERT_FLOAT = 60;
enum SQL_CONVERT_INTEGER = 61;
enum SQL_CONVERT_LONGVARCHAR = 62;
enum SQL_CONVERT_NUMERIC = 63;
enum SQL_CONVERT_REAL = 64;
enum SQL_CONVERT_SMALLINT = 65;
enum SQL_CONVERT_TIME = 66;
enum SQL_CONVERT_TIMESTAMP = 67;
enum SQL_CONVERT_TINYINT = 68;
enum SQL_CONVERT_VARBINARY = 69;
enum SQL_CONVERT_VARCHAR = 70;
enum SQL_CONVERT_LONGVARBINARY = 71;
enum SQL_ODBC_SQL_OPT_IEF = 73; /* SQL_INTEGRITY */
enum SQL_CORRELATION_NAME = 74;
enum SQL_NON_NULLABLE_COLUMNS = 75;
enum SQL_DRIVER_HLIB = 76;
enum SQL_DRIVER_ODBC_VER = 77;
enum SQL_LOCK_TYPES = 78;
enum SQL_POS_OPERATIONS = 79;
enum SQL_POSITIONED_STATEMENTS = 80;
enum SQL_BOOKMARK_PERSISTENCE = 82;
enum SQL_STATIC_SENSITIVITY = 83;
enum SQL_FILE_USAGE = 84;
enum SQL_COLUMN_ALIAS = 87;
enum SQL_GROUP_BY = 88;
enum SQL_KEYWORDS = 89;
enum SQL_OWNER_USAGE = 91;
enum SQL_QUALIFIER_USAGE = 92;
enum SQL_QUOTED_IDENTIFIER_CASE = 93;
enum SQL_SUBQUERIES = 95;
enum SQL_UNION = 96;
enum SQL_MAX_ROW_SIZE_INCLUDES_LONG = 103;
enum SQL_MAX_CHAR_LITERAL_LEN = 108;
enum SQL_TIMEDATE_ADD_INTERVALS = 109;
enum SQL_TIMEDATE_DIFF_INTERVALS = 110;
enum SQL_NEED_LONG_DATA_LEN = 111;
enum SQL_MAX_BINARY_LITERAL_LEN = 112;
enum SQL_LIKE_ESCAPE_CLAUSE = 113;
enum SQL_QUALIFIER_LOCATION = 114;

/*-----------------------------------------------*/
/* ODBC 3.0 SQLGetInfo values that are not part  */
/* of the X/Open standard at this time.   X/Open */
/* standard values are in sql.h.                 */
/*-----------------------------------------------*/

enum SQL_ACTIVE_ENVIRONMENTS = 116;
enum SQL_ALTER_DOMAIN = 117;

enum SQL_SQL_CONFORMANCE = 118;
enum SQL_DATETIME_LITERALS = 119;

enum SQL_ASYNC_MODE = 10021; /* new X/Open spec */
enum SQL_BATCH_ROW_COUNT = 120;
enum SQL_BATCH_SUPPORT = 121;
enum SQL_CATALOG_LOCATION = SQL_QUALIFIER_LOCATION;
enum SQL_CATALOG_NAME_SEPARATOR = SQL_QUALIFIER_NAME_SEPARATOR;
enum SQL_CATALOG_TERM = SQL_QUALIFIER_TERM;
enum SQL_CATALOG_USAGE = SQL_QUALIFIER_USAGE;
enum SQL_CONVERT_WCHAR = 122;
enum SQL_CONVERT_INTERVAL_DAY_TIME = 123;
enum SQL_CONVERT_INTERVAL_YEAR_MONTH = 124;
enum SQL_CONVERT_WLONGVARCHAR = 125;
enum SQL_CONVERT_WVARCHAR = 126;
enum SQL_CREATE_ASSERTION = 127;
enum SQL_CREATE_CHARACTER_SET = 128;
enum SQL_CREATE_COLLATION = 129;
enum SQL_CREATE_DOMAIN = 130;
enum SQL_CREATE_SCHEMA = 131;
enum SQL_CREATE_TABLE = 132;
enum SQL_CREATE_TRANSLATION = 133;
enum SQL_CREATE_VIEW = 134;
enum SQL_DRIVER_HDESC = 135;
enum SQL_DROP_ASSERTION = 136;
enum SQL_DROP_CHARACTER_SET = 137;
enum SQL_DROP_COLLATION = 138;
enum SQL_DROP_DOMAIN = 139;
enum SQL_DROP_SCHEMA = 140;
enum SQL_DROP_TABLE = 141;
enum SQL_DROP_TRANSLATION = 142;
enum SQL_DROP_VIEW = 143;
enum SQL_DYNAMIC_CURSOR_ATTRIBUTES1 = 144;
enum SQL_DYNAMIC_CURSOR_ATTRIBUTES2 = 145;
enum SQL_FORWARD_ONLY_CURSOR_ATTRIBUTES1 = 146;
enum SQL_FORWARD_ONLY_CURSOR_ATTRIBUTES2 = 147;
enum SQL_INDEX_KEYWORDS = 148;
enum SQL_INFO_SCHEMA_VIEWS = 149;
enum SQL_KEYSET_CURSOR_ATTRIBUTES1 = 150;
enum SQL_KEYSET_CURSOR_ATTRIBUTES2 = 151;
enum SQL_MAX_ASYNC_CONCURRENT_STATEMENTS = 10022; /* new X/Open spec */
enum SQL_ODBC_INTERFACE_CONFORMANCE = 152;
enum SQL_PARAM_ARRAY_ROW_COUNTS = 153;
enum SQL_PARAM_ARRAY_SELECTS = 154;
enum SQL_SCHEMA_TERM = SQL_OWNER_TERM;
enum SQL_SCHEMA_USAGE = SQL_OWNER_USAGE;
enum SQL_SQL92_DATETIME_FUNCTIONS = 155;
enum SQL_SQL92_FOREIGN_KEY_DELETE_RULE = 156;
enum SQL_SQL92_FOREIGN_KEY_UPDATE_RULE = 157;
enum SQL_SQL92_GRANT = 158;
enum SQL_SQL92_NUMERIC_VALUE_FUNCTIONS = 159;
enum SQL_SQL92_PREDICATES = 160;
enum SQL_SQL92_RELATIONAL_JOIN_OPERATORS = 161;
enum SQL_SQL92_REVOKE = 162;
enum SQL_SQL92_ROW_VALUE_CONSTRUCTOR = 163;
enum SQL_SQL92_STRING_FUNCTIONS = 164;
enum SQL_SQL92_VALUE_EXPRESSIONS = 165;
enum SQL_STANDARD_CLI_CONFORMANCE = 166;
enum SQL_STATIC_CURSOR_ATTRIBUTES1 = 167;
enum SQL_STATIC_CURSOR_ATTRIBUTES2 = 168;

enum SQL_AGGREGATE_FUNCTIONS = 169;
enum SQL_DDL_INDEX = 170;
enum SQL_DM_VER = 171;
enum SQL_INSERT_STATEMENT = 172;
enum SQL_CONVERT_GUID = 173;
enum SQL_UNION_STATEMENT = SQL_UNION;

// Info Types
enum SQL_ASYNC_DBC_FUNCTIONS = 10023;

enum SQL_DRIVER_AWARE_POOLING_SUPPORTED = 10024;

enum SQL_ASYNC_NOTIFICATION = 10025;

// Possible values for SQL_ASYNC_NOTIFICATION
enum SQL_ASYNC_NOTIFICATION_NOT_CAPABLE = 0x00000000L;
enum SQL_ASYNC_NOTIFICATION_CAPABLE = 0x00000001L;

enum SQL_DTC_TRANSITION_COST = 1750;

/* SQL_ALTER_TABLE bitmasks */
/* the following 5 bitmasks are defined in sql.h
*#define SQL_AT_ADD_COLUMN                      0x00000001L
*#define SQL_AT_DROP_COLUMN                     0x00000002L
*#define SQL_AT_ADD_CONSTRAINT                  0x00000008L
*/
enum SQL_AT_ADD_COLUMN_SINGLE = 0x00000020L;
enum SQL_AT_ADD_COLUMN_DEFAULT = 0x00000040L;
enum SQL_AT_ADD_COLUMN_COLLATION = 0x00000080L;
enum SQL_AT_SET_COLUMN_DEFAULT = 0x00000100L;
enum SQL_AT_DROP_COLUMN_DEFAULT = 0x00000200L;
enum SQL_AT_DROP_COLUMN_CASCADE = 0x00000400L;
enum SQL_AT_DROP_COLUMN_RESTRICT = 0x00000800L;
enum SQL_AT_ADD_TABLE_CONSTRAINT = 0x00001000L;
enum SQL_AT_DROP_TABLE_CONSTRAINT_CASCADE = 0x00002000L;
enum SQL_AT_DROP_TABLE_CONSTRAINT_RESTRICT = 0x00004000L;
enum SQL_AT_CONSTRAINT_NAME_DEFINITION = 0x00008000L;
enum SQL_AT_CONSTRAINT_INITIALLY_DEFERRED = 0x00010000L;
enum SQL_AT_CONSTRAINT_INITIALLY_IMMEDIATE = 0x00020000L;
enum SQL_AT_CONSTRAINT_DEFERRABLE = 0x00040000L;
enum SQL_AT_CONSTRAINT_NON_DEFERRABLE = 0x00080000L;

/* SQL_CONVERT_*  return value bitmasks */

enum SQL_CVT_CHAR = 0x00000001L;
enum SQL_CVT_NUMERIC = 0x00000002L;
enum SQL_CVT_DECIMAL = 0x00000004L;
enum SQL_CVT_INTEGER = 0x00000008L;
enum SQL_CVT_SMALLINT = 0x00000010L;
enum SQL_CVT_FLOAT = 0x00000020L;
enum SQL_CVT_REAL = 0x00000040L;
enum SQL_CVT_DOUBLE = 0x00000080L;
enum SQL_CVT_VARCHAR = 0x00000100L;
enum SQL_CVT_LONGVARCHAR = 0x00000200L;
enum SQL_CVT_BINARY = 0x00000400L;
enum SQL_CVT_VARBINARY = 0x00000800L;
enum SQL_CVT_BIT = 0x00001000L;
enum SQL_CVT_TINYINT = 0x00002000L;
enum SQL_CVT_BIGINT = 0x00004000L;
enum SQL_CVT_DATE = 0x00008000L;
enum SQL_CVT_TIME = 0x00010000L;
enum SQL_CVT_TIMESTAMP = 0x00020000L;
enum SQL_CVT_LONGVARBINARY = 0x00040000L;
enum SQL_CVT_INTERVAL_YEAR_MONTH = 0x00080000L;
enum SQL_CVT_INTERVAL_DAY_TIME = 0x00100000L;
enum SQL_CVT_WCHAR = 0x00200000L;
enum SQL_CVT_WLONGVARCHAR = 0x00400000L;
enum SQL_CVT_WVARCHAR = 0x00800000L;
enum SQL_CVT_GUID = 0x01000000L;

/* SQL_CONVERT_FUNCTIONS functions */
enum SQL_FN_CVT_CONVERT = 0x00000001L;
enum SQL_FN_CVT_CAST = 0x00000002L;

/* SQL_STRING_FUNCTIONS functions */

enum SQL_FN_STR_CONCAT = 0x00000001L;
enum SQL_FN_STR_INSERT = 0x00000002L;
enum SQL_FN_STR_LEFT = 0x00000004L;
enum SQL_FN_STR_LTRIM = 0x00000008L;
enum SQL_FN_STR_LENGTH = 0x00000010L;
enum SQL_FN_STR_LOCATE = 0x00000020L;
enum SQL_FN_STR_LCASE = 0x00000040L;
enum SQL_FN_STR_REPEAT = 0x00000080L;
enum SQL_FN_STR_REPLACE = 0x00000100L;
enum SQL_FN_STR_RIGHT = 0x00000200L;
enum SQL_FN_STR_RTRIM = 0x00000400L;
enum SQL_FN_STR_SUBSTRING = 0x00000800L;
enum SQL_FN_STR_UCASE = 0x00001000L;
enum SQL_FN_STR_ASCII = 0x00002000L;
enum SQL_FN_STR_CHAR = 0x00004000L;
enum SQL_FN_STR_DIFFERENCE = 0x00008000L;
enum SQL_FN_STR_LOCATE_2 = 0x00010000L;
enum SQL_FN_STR_SOUNDEX = 0x00020000L;
enum SQL_FN_STR_SPACE = 0x00040000L;
enum SQL_FN_STR_BIT_LENGTH = 0x00080000L;
enum SQL_FN_STR_CHAR_LENGTH = 0x00100000L;
enum SQL_FN_STR_CHARACTER_LENGTH = 0x00200000L;
enum SQL_FN_STR_OCTET_LENGTH = 0x00400000L;
enum SQL_FN_STR_POSITION = 0x00800000L;

/* SQL_SQL92_STRING_FUNCTIONS */
enum SQL_SSF_CONVERT = 0x00000001L;
enum SQL_SSF_LOWER = 0x00000002L;
enum SQL_SSF_UPPER = 0x00000004L;
enum SQL_SSF_SUBSTRING = 0x00000008L;
enum SQL_SSF_TRANSLATE = 0x00000010L;
enum SQL_SSF_TRIM_BOTH = 0x00000020L;
enum SQL_SSF_TRIM_LEADING = 0x00000040L;
enum SQL_SSF_TRIM_TRAILING = 0x00000080L;

/* SQL_NUMERIC_FUNCTIONS functions */

enum SQL_FN_NUM_ABS = 0x00000001L;
enum SQL_FN_NUM_ACOS = 0x00000002L;
enum SQL_FN_NUM_ASIN = 0x00000004L;
enum SQL_FN_NUM_ATAN = 0x00000008L;
enum SQL_FN_NUM_ATAN2 = 0x00000010L;
enum SQL_FN_NUM_CEILING = 0x00000020L;
enum SQL_FN_NUM_COS = 0x00000040L;
enum SQL_FN_NUM_COT = 0x00000080L;
enum SQL_FN_NUM_EXP = 0x00000100L;
enum SQL_FN_NUM_FLOOR = 0x00000200L;
enum SQL_FN_NUM_LOG = 0x00000400L;
enum SQL_FN_NUM_MOD = 0x00000800L;
enum SQL_FN_NUM_SIGN = 0x00001000L;
enum SQL_FN_NUM_SIN = 0x00002000L;
enum SQL_FN_NUM_SQRT = 0x00004000L;
enum SQL_FN_NUM_TAN = 0x00008000L;
enum SQL_FN_NUM_PI = 0x00010000L;
enum SQL_FN_NUM_RAND = 0x00020000L;
enum SQL_FN_NUM_DEGREES = 0x00040000L;
enum SQL_FN_NUM_LOG10 = 0x00080000L;
enum SQL_FN_NUM_POWER = 0x00100000L;
enum SQL_FN_NUM_RADIANS = 0x00200000L;
enum SQL_FN_NUM_ROUND = 0x00400000L;
enum SQL_FN_NUM_TRUNCATE = 0x00800000L;

/* SQL_SQL92_NUMERIC_VALUE_FUNCTIONS */
enum SQL_SNVF_BIT_LENGTH = 0x00000001L;
enum SQL_SNVF_CHAR_LENGTH = 0x00000002L;
enum SQL_SNVF_CHARACTER_LENGTH = 0x00000004L;
enum SQL_SNVF_EXTRACT = 0x00000008L;
enum SQL_SNVF_OCTET_LENGTH = 0x00000010L;
enum SQL_SNVF_POSITION = 0x00000020L;

/* SQL_TIMEDATE_FUNCTIONS functions */

enum SQL_FN_TD_NOW = 0x00000001L;
enum SQL_FN_TD_CURDATE = 0x00000002L;
enum SQL_FN_TD_DAYOFMONTH = 0x00000004L;
enum SQL_FN_TD_DAYOFWEEK = 0x00000008L;
enum SQL_FN_TD_DAYOFYEAR = 0x00000010L;
enum SQL_FN_TD_MONTH = 0x00000020L;
enum SQL_FN_TD_QUARTER = 0x00000040L;
enum SQL_FN_TD_WEEK = 0x00000080L;
enum SQL_FN_TD_YEAR = 0x00000100L;
enum SQL_FN_TD_CURTIME = 0x00000200L;
enum SQL_FN_TD_HOUR = 0x00000400L;
enum SQL_FN_TD_MINUTE = 0x00000800L;
enum SQL_FN_TD_SECOND = 0x00001000L;
enum SQL_FN_TD_TIMESTAMPADD = 0x00002000L;
enum SQL_FN_TD_TIMESTAMPDIFF = 0x00004000L;
enum SQL_FN_TD_DAYNAME = 0x00008000L;
enum SQL_FN_TD_MONTHNAME = 0x00010000L;
enum SQL_FN_TD_CURRENT_DATE = 0x00020000L;
enum SQL_FN_TD_CURRENT_TIME = 0x00040000L;
enum SQL_FN_TD_CURRENT_TIMESTAMP = 0x00080000L;
enum SQL_FN_TD_EXTRACT = 0x00100000L;

/* SQL_SQL92_DATETIME_FUNCTIONS */
enum SQL_SDF_CURRENT_DATE = 0x00000001L;
enum SQL_SDF_CURRENT_TIME = 0x00000002L;
enum SQL_SDF_CURRENT_TIMESTAMP = 0x00000004L;

/* SQL_SYSTEM_FUNCTIONS functions */

enum SQL_FN_SYS_USERNAME = 0x00000001L;
enum SQL_FN_SYS_DBNAME = 0x00000002L;
enum SQL_FN_SYS_IFNULL = 0x00000004L;

/* SQL_TIMEDATE_ADD_INTERVALS and SQL_TIMEDATE_DIFF_INTERVALS functions */

enum SQL_FN_TSI_FRAC_SECOND = 0x00000001L;
enum SQL_FN_TSI_SECOND = 0x00000002L;
enum SQL_FN_TSI_MINUTE = 0x00000004L;
enum SQL_FN_TSI_HOUR = 0x00000008L;
enum SQL_FN_TSI_DAY = 0x00000010L;
enum SQL_FN_TSI_WEEK = 0x00000020L;
enum SQL_FN_TSI_MONTH = 0x00000040L;
enum SQL_FN_TSI_QUARTER = 0x00000080L;
enum SQL_FN_TSI_YEAR = 0x00000100L;

/* bitmasks for SQL_DYNAMIC_CURSOR_ATTRIBUTES1,
 * SQL_FORWARD_ONLY_CURSOR_ATTRIBUTES1,
 * SQL_KEYSET_CURSOR_ATTRIBUTES1, and SQL_STATIC_CURSOR_ATTRIBUTES1
 */
/* supported SQLFetchScroll FetchOrientation's */
enum SQL_CA1_NEXT = 0x00000001L;
enum SQL_CA1_ABSOLUTE = 0x00000002L;
enum SQL_CA1_RELATIVE = 0x00000004L;
enum SQL_CA1_BOOKMARK = 0x00000008L;

/* supported SQLSetPos LockType's */
enum SQL_CA1_LOCK_NO_CHANGE = 0x00000040L;
enum SQL_CA1_LOCK_EXCLUSIVE = 0x00000080L;
enum SQL_CA1_LOCK_UNLOCK = 0x00000100L;

/* supported SQLSetPos Operations */
enum SQL_CA1_POS_POSITION = 0x00000200L;
enum SQL_CA1_POS_UPDATE = 0x00000400L;
enum SQL_CA1_POS_DELETE = 0x00000800L;
enum SQL_CA1_POS_REFRESH = 0x00001000L;

/* positioned updates and deletes */
enum SQL_CA1_POSITIONED_UPDATE = 0x00002000L;
enum SQL_CA1_POSITIONED_DELETE = 0x00004000L;
enum SQL_CA1_SELECT_FOR_UPDATE = 0x00008000L;

/* supported SQLBulkOperations operations */
enum SQL_CA1_BULK_ADD = 0x00010000L;
enum SQL_CA1_BULK_UPDATE_BY_BOOKMARK = 0x00020000L;
enum SQL_CA1_BULK_DELETE_BY_BOOKMARK = 0x00040000L;
enum SQL_CA1_BULK_FETCH_BY_BOOKMARK = 0x00080000L;

/* bitmasks for SQL_DYNAMIC_CURSOR_ATTRIBUTES2,
 * SQL_FORWARD_ONLY_CURSOR_ATTRIBUTES2,
 * SQL_KEYSET_CURSOR_ATTRIBUTES2, and SQL_STATIC_CURSOR_ATTRIBUTES2
 */
/* supported values for SQL_ATTR_SCROLL_CONCURRENCY */
enum SQL_CA2_READ_ONLY_CONCURRENCY = 0x00000001L;
enum SQL_CA2_LOCK_CONCURRENCY = 0x00000002L;
enum SQL_CA2_OPT_ROWVER_CONCURRENCY = 0x00000004L;
enum SQL_CA2_OPT_VALUES_CONCURRENCY = 0x00000008L;

/* sensitivity of the cursor to its own inserts, deletes, and updates */
enum SQL_CA2_SENSITIVITY_ADDITIONS = 0x00000010L;
enum SQL_CA2_SENSITIVITY_DELETIONS = 0x00000020L;
enum SQL_CA2_SENSITIVITY_UPDATES = 0x00000040L;

/* semantics of SQL_ATTR_MAX_ROWS */
enum SQL_CA2_MAX_ROWS_SELECT = 0x00000080L;
enum SQL_CA2_MAX_ROWS_INSERT = 0x00000100L;
enum SQL_CA2_MAX_ROWS_DELETE = 0x00000200L;
enum SQL_CA2_MAX_ROWS_UPDATE = 0x00000400L;
enum SQL_CA2_MAX_ROWS_CATALOG = 0x00000800L;
enum SQL_CA2_MAX_ROWS_AFFECTS_ALL = SQL_CA2_MAX_ROWS_SELECT | SQL_CA2_MAX_ROWS_INSERT | SQL_CA2_MAX_ROWS_DELETE | SQL_CA2_MAX_ROWS_UPDATE | SQL_CA2_MAX_ROWS_CATALOG;

/* semantics of SQL_DIAG_CURSOR_ROW_COUNT */
enum SQL_CA2_CRC_EXACT = 0x00001000L;
enum SQL_CA2_CRC_APPROXIMATE = 0x00002000L;

/* the kinds of positioned statements that can be simulated */
enum SQL_CA2_SIMULATE_NON_UNIQUE = 0x00004000L;
enum SQL_CA2_SIMULATE_TRY_UNIQUE = 0x00008000L;
enum SQL_CA2_SIMULATE_UNIQUE = 0x00010000L;

/* SQL_ODBC_API_CONFORMANCE values */

enum SQL_OAC_NONE = 0x0000;
enum SQL_OAC_LEVEL1 = 0x0001;
enum SQL_OAC_LEVEL2 = 0x0002;

/* SQL_ODBC_SAG_CLI_CONFORMANCE values */

enum SQL_OSCC_NOT_COMPLIANT = 0x0000;
enum SQL_OSCC_COMPLIANT = 0x0001;

/* SQL_ODBC_SQL_CONFORMANCE values */

enum SQL_OSC_MINIMUM = 0x0000;
enum SQL_OSC_CORE = 0x0001;
enum SQL_OSC_EXTENDED = 0x0002;

/* SQL_CONCAT_NULL_BEHAVIOR values */

enum SQL_CB_NULL = 0x0000;
enum SQL_CB_NON_NULL = 0x0001;

/* SQL_SCROLL_OPTIONS masks */

enum SQL_SO_FORWARD_ONLY = 0x00000001L;
enum SQL_SO_KEYSET_DRIVEN = 0x00000002L;
enum SQL_SO_DYNAMIC = 0x00000004L;
enum SQL_SO_MIXED = 0x00000008L;
enum SQL_SO_STATIC = 0x00000010L;

/* SQL_FETCH_DIRECTION masks */

/* SQL_FETCH_RESUME is no longer supported
#define SQL_FD_FETCH_RESUME                 0x00000040L
*/
enum SQL_FD_FETCH_BOOKMARK = 0x00000080L;

/* SQL_TXN_ISOLATION_OPTION masks */
/* SQL_TXN_VERSIONING is no longer supported
#define SQL_TXN_VERSIONING                  0x00000010L
*/

/* SQL_CORRELATION_NAME values */

enum SQL_CN_NONE = 0x0000;
enum SQL_CN_DIFFERENT = 0x0001;
enum SQL_CN_ANY = 0x0002;

/* SQL_NON_NULLABLE_COLUMNS values */

enum SQL_NNC_NULL = 0x0000;
enum SQL_NNC_NON_NULL = 0x0001;

/* SQL_NULL_COLLATION values */

enum SQL_NC_START = 0x0002;
enum SQL_NC_END = 0x0004;

/* SQL_FILE_USAGE values */

enum SQL_FILE_NOT_SUPPORTED = 0x0000;
enum SQL_FILE_TABLE = 0x0001;
enum SQL_FILE_QUALIFIER = 0x0002;
enum SQL_FILE_CATALOG = SQL_FILE_QUALIFIER; // ODBC 3.0

/* SQL_GETDATA_EXTENSIONS values */

enum SQL_GD_BLOCK = 0x00000004L;
enum SQL_GD_BOUND = 0x00000008L;
enum SQL_GD_OUTPUT_PARAMS = 0x00000010L;

/* SQL_POSITIONED_STATEMENTS masks */

enum SQL_PS_POSITIONED_DELETE = 0x00000001L;
enum SQL_PS_POSITIONED_UPDATE = 0x00000002L;
enum SQL_PS_SELECT_FOR_UPDATE = 0x00000004L;

/* SQL_GROUP_BY values */

enum SQL_GB_NOT_SUPPORTED = 0x0000;
enum SQL_GB_GROUP_BY_EQUALS_SELECT = 0x0001;
enum SQL_GB_GROUP_BY_CONTAINS_SELECT = 0x0002;
enum SQL_GB_NO_RELATION = 0x0003;
enum SQL_GB_COLLATE = 0x0004;

/* ODBCVER >= 0x0300 */

/* SQL_OWNER_USAGE masks */

enum SQL_OU_DML_STATEMENTS = 0x00000001L;
enum SQL_OU_PROCEDURE_INVOCATION = 0x00000002L;
enum SQL_OU_TABLE_DEFINITION = 0x00000004L;
enum SQL_OU_INDEX_DEFINITION = 0x00000008L;
enum SQL_OU_PRIVILEGE_DEFINITION = 0x00000010L;

/* SQL_SCHEMA_USAGE masks */
enum SQL_SU_DML_STATEMENTS = SQL_OU_DML_STATEMENTS;
enum SQL_SU_PROCEDURE_INVOCATION = SQL_OU_PROCEDURE_INVOCATION;
enum SQL_SU_TABLE_DEFINITION = SQL_OU_TABLE_DEFINITION;
enum SQL_SU_INDEX_DEFINITION = SQL_OU_INDEX_DEFINITION;
enum SQL_SU_PRIVILEGE_DEFINITION = SQL_OU_PRIVILEGE_DEFINITION;
/* ODBCVER >= 0x0300 */

/* SQL_QUALIFIER_USAGE masks */

enum SQL_QU_DML_STATEMENTS = 0x00000001L;
enum SQL_QU_PROCEDURE_INVOCATION = 0x00000002L;
enum SQL_QU_TABLE_DEFINITION = 0x00000004L;
enum SQL_QU_INDEX_DEFINITION = 0x00000008L;
enum SQL_QU_PRIVILEGE_DEFINITION = 0x00000010L;

/* SQL_CATALOG_USAGE masks */
enum SQL_CU_DML_STATEMENTS = SQL_QU_DML_STATEMENTS;
enum SQL_CU_PROCEDURE_INVOCATION = SQL_QU_PROCEDURE_INVOCATION;
enum SQL_CU_TABLE_DEFINITION = SQL_QU_TABLE_DEFINITION;
enum SQL_CU_INDEX_DEFINITION = SQL_QU_INDEX_DEFINITION;
enum SQL_CU_PRIVILEGE_DEFINITION = SQL_QU_PRIVILEGE_DEFINITION;
/* ODBCVER >= 0x0300 */

/* SQL_SUBQUERIES masks */

enum SQL_SQ_COMPARISON = 0x00000001L;
enum SQL_SQ_EXISTS = 0x00000002L;
enum SQL_SQ_IN = 0x00000004L;
enum SQL_SQ_QUANTIFIED = 0x00000008L;
enum SQL_SQ_CORRELATED_SUBQUERIES = 0x00000010L;

/* SQL_UNION masks */

enum SQL_U_UNION = 0x00000001L;
enum SQL_U_UNION_ALL = 0x00000002L;

/* SQL_BOOKMARK_PERSISTENCE values */

enum SQL_BP_CLOSE = 0x00000001L;
enum SQL_BP_DELETE = 0x00000002L;
enum SQL_BP_DROP = 0x00000004L;
enum SQL_BP_TRANSACTION = 0x00000008L;
enum SQL_BP_UPDATE = 0x00000010L;
enum SQL_BP_OTHER_HSTMT = 0x00000020L;
enum SQL_BP_SCROLL = 0x00000040L;

/* SQL_STATIC_SENSITIVITY values */

enum SQL_SS_ADDITIONS = 0x00000001L;
enum SQL_SS_DELETIONS = 0x00000002L;
enum SQL_SS_UPDATES = 0x00000004L;

/* SQL_VIEW values */
enum SQL_CV_CREATE_VIEW = 0x00000001L;
enum SQL_CV_CHECK_OPTION = 0x00000002L;
enum SQL_CV_CASCADED = 0x00000004L;
enum SQL_CV_LOCAL = 0x00000008L;

/* SQL_LOCK_TYPES masks */

enum SQL_LCK_NO_CHANGE = 0x00000001L;
enum SQL_LCK_EXCLUSIVE = 0x00000002L;
enum SQL_LCK_UNLOCK = 0x00000004L;

/* SQL_POS_OPERATIONS masks */

enum SQL_POS_POSITION = 0x00000001L;
enum SQL_POS_REFRESH = 0x00000002L;
enum SQL_POS_UPDATE = 0x00000004L;
enum SQL_POS_DELETE = 0x00000008L;
enum SQL_POS_ADD = 0x00000010L;

/* SQL_QUALIFIER_LOCATION values */

enum SQL_QL_START = 0x0001;
enum SQL_QL_END = 0x0002;

/* Here start return values for ODBC 3.0 SQLGetInfo */

/* SQL_AGGREGATE_FUNCTIONS bitmasks */
enum SQL_AF_AVG = 0x00000001L;
enum SQL_AF_COUNT = 0x00000002L;
enum SQL_AF_MAX = 0x00000004L;
enum SQL_AF_MIN = 0x00000008L;
enum SQL_AF_SUM = 0x00000010L;
enum SQL_AF_DISTINCT = 0x00000020L;
enum SQL_AF_ALL = 0x00000040L;

/* SQL_SQL_CONFORMANCE bit masks */
enum SQL_SC_SQL92_ENTRY = 0x00000001L;
enum SQL_SC_FIPS127_2_TRANSITIONAL = 0x00000002L;
enum SQL_SC_SQL92_INTERMEDIATE = 0x00000004L;
enum SQL_SC_SQL92_FULL = 0x00000008L;

/* SQL_DATETIME_LITERALS masks */
enum SQL_DL_SQL92_DATE = 0x00000001L;
enum SQL_DL_SQL92_TIME = 0x00000002L;
enum SQL_DL_SQL92_TIMESTAMP = 0x00000004L;
enum SQL_DL_SQL92_INTERVAL_YEAR = 0x00000008L;
enum SQL_DL_SQL92_INTERVAL_MONTH = 0x00000010L;
enum SQL_DL_SQL92_INTERVAL_DAY = 0x00000020L;
enum SQL_DL_SQL92_INTERVAL_HOUR = 0x00000040L;
enum SQL_DL_SQL92_INTERVAL_MINUTE = 0x00000080L;
enum SQL_DL_SQL92_INTERVAL_SECOND = 0x00000100L;
enum SQL_DL_SQL92_INTERVAL_YEAR_TO_MONTH = 0x00000200L;
enum SQL_DL_SQL92_INTERVAL_DAY_TO_HOUR = 0x00000400L;
enum SQL_DL_SQL92_INTERVAL_DAY_TO_MINUTE = 0x00000800L;
enum SQL_DL_SQL92_INTERVAL_DAY_TO_SECOND = 0x00001000L;
enum SQL_DL_SQL92_INTERVAL_HOUR_TO_MINUTE = 0x00002000L;
enum SQL_DL_SQL92_INTERVAL_HOUR_TO_SECOND = 0x00004000L;
enum SQL_DL_SQL92_INTERVAL_MINUTE_TO_SECOND = 0x00008000L;

/* SQL_CATALOG_LOCATION values */
enum SQL_CL_START = SQL_QL_START;
enum SQL_CL_END = SQL_QL_END;

/* values for SQL_BATCH_ROW_COUNT */
enum SQL_BRC_PROCEDURES = 0x0000001;
enum SQL_BRC_EXPLICIT = 0x0000002;
enum SQL_BRC_ROLLED_UP = 0x0000004;

/* bitmasks for SQL_BATCH_SUPPORT */
enum SQL_BS_SELECT_EXPLICIT = 0x00000001L;
enum SQL_BS_ROW_COUNT_EXPLICIT = 0x00000002L;
enum SQL_BS_SELECT_PROC = 0x00000004L;
enum SQL_BS_ROW_COUNT_PROC = 0x00000008L;

/* Values for SQL_PARAM_ARRAY_ROW_COUNTS getinfo */
enum SQL_PARC_BATCH = 1;
enum SQL_PARC_NO_BATCH = 2;

/* values for SQL_PARAM_ARRAY_SELECTS */
enum SQL_PAS_BATCH = 1;
enum SQL_PAS_NO_BATCH = 2;
enum SQL_PAS_NO_SELECT = 3;

/* Bitmasks for SQL_INDEX_KEYWORDS */
enum SQL_IK_NONE = 0x00000000L;
enum SQL_IK_ASC = 0x00000001L;
enum SQL_IK_DESC = 0x00000002L;
enum SQL_IK_ALL = SQL_IK_ASC | SQL_IK_DESC;

/* Bitmasks for SQL_INFO_SCHEMA_VIEWS */

enum SQL_ISV_ASSERTIONS = 0x00000001L;
enum SQL_ISV_CHARACTER_SETS = 0x00000002L;
enum SQL_ISV_CHECK_CONSTRAINTS = 0x00000004L;
enum SQL_ISV_COLLATIONS = 0x00000008L;
enum SQL_ISV_COLUMN_DOMAIN_USAGE = 0x00000010L;
enum SQL_ISV_COLUMN_PRIVILEGES = 0x00000020L;
enum SQL_ISV_COLUMNS = 0x00000040L;
enum SQL_ISV_CONSTRAINT_COLUMN_USAGE = 0x00000080L;
enum SQL_ISV_CONSTRAINT_TABLE_USAGE = 0x00000100L;
enum SQL_ISV_DOMAIN_CONSTRAINTS = 0x00000200L;
enum SQL_ISV_DOMAINS = 0x00000400L;
enum SQL_ISV_KEY_COLUMN_USAGE = 0x00000800L;
enum SQL_ISV_REFERENTIAL_CONSTRAINTS = 0x00001000L;
enum SQL_ISV_SCHEMATA = 0x00002000L;
enum SQL_ISV_SQL_LANGUAGES = 0x00004000L;
enum SQL_ISV_TABLE_CONSTRAINTS = 0x00008000L;
enum SQL_ISV_TABLE_PRIVILEGES = 0x00010000L;
enum SQL_ISV_TABLES = 0x00020000L;
enum SQL_ISV_TRANSLATIONS = 0x00040000L;
enum SQL_ISV_USAGE_PRIVILEGES = 0x00080000L;
enum SQL_ISV_VIEW_COLUMN_USAGE = 0x00100000L;
enum SQL_ISV_VIEW_TABLE_USAGE = 0x00200000L;
enum SQL_ISV_VIEWS = 0x00400000L;

/* Bitmasks for SQL_ASYNC_MODE */

enum SQL_AM_NONE = 0;
enum SQL_AM_CONNECTION = 1;
enum SQL_AM_STATEMENT = 2;

/* Bitmasks for SQL_ALTER_DOMAIN */
enum SQL_AD_CONSTRAINT_NAME_DEFINITION = 0x00000001L;
enum SQL_AD_ADD_DOMAIN_CONSTRAINT = 0x00000002L;
enum SQL_AD_DROP_DOMAIN_CONSTRAINT = 0x00000004L;
enum SQL_AD_ADD_DOMAIN_DEFAULT = 0x00000008L;
enum SQL_AD_DROP_DOMAIN_DEFAULT = 0x00000010L;
enum SQL_AD_ADD_CONSTRAINT_INITIALLY_DEFERRED = 0x00000020L;
enum SQL_AD_ADD_CONSTRAINT_INITIALLY_IMMEDIATE = 0x00000040L;
enum SQL_AD_ADD_CONSTRAINT_DEFERRABLE = 0x00000080L;
enum SQL_AD_ADD_CONSTRAINT_NON_DEFERRABLE = 0x00000100L;

/* SQL_CREATE_SCHEMA bitmasks */
enum SQL_CS_CREATE_SCHEMA = 0x00000001L;
enum SQL_CS_AUTHORIZATION = 0x00000002L;
enum SQL_CS_DEFAULT_CHARACTER_SET = 0x00000004L;

/* SQL_CREATE_TRANSLATION bitmasks */
enum SQL_CTR_CREATE_TRANSLATION = 0x00000001L;

/* SQL_CREATE_ASSERTION bitmasks */
enum SQL_CA_CREATE_ASSERTION = 0x00000001L;
enum SQL_CA_CONSTRAINT_INITIALLY_DEFERRED = 0x00000010L;
enum SQL_CA_CONSTRAINT_INITIALLY_IMMEDIATE = 0x00000020L;
enum SQL_CA_CONSTRAINT_DEFERRABLE = 0x00000040L;
enum SQL_CA_CONSTRAINT_NON_DEFERRABLE = 0x00000080L;

/* SQL_CREATE_CHARACTER_SET bitmasks */
enum SQL_CCS_CREATE_CHARACTER_SET = 0x00000001L;
enum SQL_CCS_COLLATE_CLAUSE = 0x00000002L;
enum SQL_CCS_LIMITED_COLLATION = 0x00000004L;

/* SQL_CREATE_COLLATION bitmasks */
enum SQL_CCOL_CREATE_COLLATION = 0x00000001L;

/* SQL_CREATE_DOMAIN bitmasks */
enum SQL_CDO_CREATE_DOMAIN = 0x00000001L;
enum SQL_CDO_DEFAULT = 0x00000002L;
enum SQL_CDO_CONSTRAINT = 0x00000004L;
enum SQL_CDO_COLLATION = 0x00000008L;
enum SQL_CDO_CONSTRAINT_NAME_DEFINITION = 0x00000010L;
enum SQL_CDO_CONSTRAINT_INITIALLY_DEFERRED = 0x00000020L;
enum SQL_CDO_CONSTRAINT_INITIALLY_IMMEDIATE = 0x00000040L;
enum SQL_CDO_CONSTRAINT_DEFERRABLE = 0x00000080L;
enum SQL_CDO_CONSTRAINT_NON_DEFERRABLE = 0x00000100L;

/* SQL_CREATE_TABLE bitmasks */
enum SQL_CT_CREATE_TABLE = 0x00000001L;
enum SQL_CT_COMMIT_PRESERVE = 0x00000002L;
enum SQL_CT_COMMIT_DELETE = 0x00000004L;
enum SQL_CT_GLOBAL_TEMPORARY = 0x00000008L;
enum SQL_CT_LOCAL_TEMPORARY = 0x00000010L;
enum SQL_CT_CONSTRAINT_INITIALLY_DEFERRED = 0x00000020L;
enum SQL_CT_CONSTRAINT_INITIALLY_IMMEDIATE = 0x00000040L;
enum SQL_CT_CONSTRAINT_DEFERRABLE = 0x00000080L;
enum SQL_CT_CONSTRAINT_NON_DEFERRABLE = 0x00000100L;
enum SQL_CT_COLUMN_CONSTRAINT = 0x00000200L;
enum SQL_CT_COLUMN_DEFAULT = 0x00000400L;
enum SQL_CT_COLUMN_COLLATION = 0x00000800L;
enum SQL_CT_TABLE_CONSTRAINT = 0x00001000L;
enum SQL_CT_CONSTRAINT_NAME_DEFINITION = 0x00002000L;

/* SQL_DDL_INDEX bitmasks */
enum SQL_DI_CREATE_INDEX = 0x00000001L;
enum SQL_DI_DROP_INDEX = 0x00000002L;

/* SQL_DROP_COLLATION bitmasks */
enum SQL_DC_DROP_COLLATION = 0x00000001L;

/* SQL_DROP_DOMAIN bitmasks */
enum SQL_DD_DROP_DOMAIN = 0x00000001L;
enum SQL_DD_RESTRICT = 0x00000002L;
enum SQL_DD_CASCADE = 0x00000004L;

/* SQL_DROP_SCHEMA bitmasks */
enum SQL_DS_DROP_SCHEMA = 0x00000001L;
enum SQL_DS_RESTRICT = 0x00000002L;
enum SQL_DS_CASCADE = 0x00000004L;

/* SQL_DROP_CHARACTER_SET bitmasks */
enum SQL_DCS_DROP_CHARACTER_SET = 0x00000001L;

/* SQL_DROP_ASSERTION bitmasks */
enum SQL_DA_DROP_ASSERTION = 0x00000001L;

/* SQL_DROP_TABLE bitmasks */
enum SQL_DT_DROP_TABLE = 0x00000001L;
enum SQL_DT_RESTRICT = 0x00000002L;
enum SQL_DT_CASCADE = 0x00000004L;

/* SQL_DROP_TRANSLATION bitmasks */
enum SQL_DTR_DROP_TRANSLATION = 0x00000001L;

/* SQL_DROP_VIEW bitmasks */
enum SQL_DV_DROP_VIEW = 0x00000001L;
enum SQL_DV_RESTRICT = 0x00000002L;
enum SQL_DV_CASCADE = 0x00000004L;

/* SQL_INSERT_STATEMENT bitmasks */
enum SQL_IS_INSERT_LITERALS = 0x00000001L;
enum SQL_IS_INSERT_SEARCHED = 0x00000002L;
enum SQL_IS_SELECT_INTO = 0x00000004L;

/* SQL_ODBC_INTERFACE_CONFORMANCE values */
enum SQL_OIC_CORE = 1UL;
enum SQL_OIC_LEVEL1 = 2UL;
enum SQL_OIC_LEVEL2 = 3UL;

/* SQL_SQL92_FOREIGN_KEY_DELETE_RULE bitmasks */
enum SQL_SFKD_CASCADE = 0x00000001L;
enum SQL_SFKD_NO_ACTION = 0x00000002L;
enum SQL_SFKD_SET_DEFAULT = 0x00000004L;
enum SQL_SFKD_SET_NULL = 0x00000008L;

/* SQL_SQL92_FOREIGN_KEY_UPDATE_RULE bitmasks */
enum SQL_SFKU_CASCADE = 0x00000001L;
enum SQL_SFKU_NO_ACTION = 0x00000002L;
enum SQL_SFKU_SET_DEFAULT = 0x00000004L;
enum SQL_SFKU_SET_NULL = 0x00000008L;

/* SQL_SQL92_GRANT  bitmasks */
enum SQL_SG_USAGE_ON_DOMAIN = 0x00000001L;
enum SQL_SG_USAGE_ON_CHARACTER_SET = 0x00000002L;
enum SQL_SG_USAGE_ON_COLLATION = 0x00000004L;
enum SQL_SG_USAGE_ON_TRANSLATION = 0x00000008L;
enum SQL_SG_WITH_GRANT_OPTION = 0x00000010L;
enum SQL_SG_DELETE_TABLE = 0x00000020L;
enum SQL_SG_INSERT_TABLE = 0x00000040L;
enum SQL_SG_INSERT_COLUMN = 0x00000080L;
enum SQL_SG_REFERENCES_TABLE = 0x00000100L;
enum SQL_SG_REFERENCES_COLUMN = 0x00000200L;
enum SQL_SG_SELECT_TABLE = 0x00000400L;
enum SQL_SG_UPDATE_TABLE = 0x00000800L;
enum SQL_SG_UPDATE_COLUMN = 0x00001000L;

/* SQL_SQL92_PREDICATES bitmasks */
enum SQL_SP_EXISTS = 0x00000001L;
enum SQL_SP_ISNOTNULL = 0x00000002L;
enum SQL_SP_ISNULL = 0x00000004L;
enum SQL_SP_MATCH_FULL = 0x00000008L;
enum SQL_SP_MATCH_PARTIAL = 0x00000010L;
enum SQL_SP_MATCH_UNIQUE_FULL = 0x00000020L;
enum SQL_SP_MATCH_UNIQUE_PARTIAL = 0x00000040L;
enum SQL_SP_OVERLAPS = 0x00000080L;
enum SQL_SP_UNIQUE = 0x00000100L;
enum SQL_SP_LIKE = 0x00000200L;
enum SQL_SP_IN = 0x00000400L;
enum SQL_SP_BETWEEN = 0x00000800L;
enum SQL_SP_COMPARISON = 0x00001000L;
enum SQL_SP_QUANTIFIED_COMPARISON = 0x00002000L;

/* SQL_SQL92_RELATIONAL_JOIN_OPERATORS bitmasks */
enum SQL_SRJO_CORRESPONDING_CLAUSE = 0x00000001L;
enum SQL_SRJO_CROSS_JOIN = 0x00000002L;
enum SQL_SRJO_EXCEPT_JOIN = 0x00000004L;
enum SQL_SRJO_FULL_OUTER_JOIN = 0x00000008L;
enum SQL_SRJO_INNER_JOIN = 0x00000010L;
enum SQL_SRJO_INTERSECT_JOIN = 0x00000020L;
enum SQL_SRJO_LEFT_OUTER_JOIN = 0x00000040L;
enum SQL_SRJO_NATURAL_JOIN = 0x00000080L;
enum SQL_SRJO_RIGHT_OUTER_JOIN = 0x00000100L;
enum SQL_SRJO_UNION_JOIN = 0x00000200L;

/* SQL_SQL92_REVOKE bitmasks */
enum SQL_SR_USAGE_ON_DOMAIN = 0x00000001L;
enum SQL_SR_USAGE_ON_CHARACTER_SET = 0x00000002L;
enum SQL_SR_USAGE_ON_COLLATION = 0x00000004L;
enum SQL_SR_USAGE_ON_TRANSLATION = 0x00000008L;
enum SQL_SR_GRANT_OPTION_FOR = 0x00000010L;
enum SQL_SR_CASCADE = 0x00000020L;
enum SQL_SR_RESTRICT = 0x00000040L;
enum SQL_SR_DELETE_TABLE = 0x00000080L;
enum SQL_SR_INSERT_TABLE = 0x00000100L;
enum SQL_SR_INSERT_COLUMN = 0x00000200L;
enum SQL_SR_REFERENCES_TABLE = 0x00000400L;
enum SQL_SR_REFERENCES_COLUMN = 0x00000800L;
enum SQL_SR_SELECT_TABLE = 0x00001000L;
enum SQL_SR_UPDATE_TABLE = 0x00002000L;
enum SQL_SR_UPDATE_COLUMN = 0x00004000L;

/* SQL_SQL92_ROW_VALUE_CONSTRUCTOR bitmasks */
enum SQL_SRVC_VALUE_EXPRESSION = 0x00000001L;
enum SQL_SRVC_NULL = 0x00000002L;
enum SQL_SRVC_DEFAULT = 0x00000004L;
enum SQL_SRVC_ROW_SUBQUERY = 0x00000008L;

/* SQL_SQL92_VALUE_EXPRESSIONS bitmasks */
enum SQL_SVE_CASE = 0x00000001L;
enum SQL_SVE_CAST = 0x00000002L;
enum SQL_SVE_COALESCE = 0x00000004L;
enum SQL_SVE_NULLIF = 0x00000008L;

/* SQL_STANDARD_CLI_CONFORMANCE bitmasks */
enum SQL_SCC_XOPEN_CLI_VERSION1 = 0x00000001L;
enum SQL_SCC_ISO92_CLI = 0x00000002L;

/* SQL_UNION_STATEMENT bitmasks */
enum SQL_US_UNION = SQL_U_UNION;
enum SQL_US_UNION_ALL = SQL_U_UNION_ALL;

/* values for SQL_DRIVER_AWARE_POOLING_SUPPORTED */
enum SQL_DRIVER_AWARE_POOLING_NOT_CAPABLE = 0x00000000L;
enum SQL_DRIVER_AWARE_POOLING_CAPABLE = 0x00000001L;
/* ODBCVER >= 0x0300 */

/* SQL_DTC_TRANSITION_COST bitmasks */
enum SQL_DTC_ENLIST_EXPENSIVE = 0x00000001L;
enum SQL_DTC_UNENLIST_EXPENSIVE = 0x00000002L;

// possible values for SQL_ASYNC_DBC_FUNCTIONS 
enum SQL_ASYNC_DBC_NOT_CAPABLE = 0x00000000L;
enum SQL_ASYNC_DBC_CAPABLE = 0x00000001L;
// ODBCVER >= 0x0380

/* additional SQLDataSources fetch directions */
enum SQL_FETCH_FIRST_USER = 31;
enum SQL_FETCH_FIRST_SYSTEM = 32;
/* ODBCVER >= 0x0300 */

/* Defines for SQLSetPos */
enum SQL_ENTIRE_ROWSET = 0;

/* Operations in SQLSetPos */
enum SQL_POSITION = 0; /*      1.0 FALSE */
enum SQL_REFRESH = 1; /*      1.0 TRUE */
enum SQL_UPDATE = 2;
enum SQL_DELETE = 3;

/* Operations in SQLBulkOperations */
enum SQL_ADD = 4;
enum SQL_SETPOS_MAX_OPTION_VALUE = SQL_ADD;
enum SQL_UPDATE_BY_BOOKMARK = 5;
enum SQL_DELETE_BY_BOOKMARK = 6;
enum SQL_FETCH_BY_BOOKMARK = 7;

/* Lock options in SQLSetPos */
enum SQL_LOCK_NO_CHANGE = 0; /*      1.0 FALSE */
enum SQL_LOCK_EXCLUSIVE = 1; /*      1.0 TRUE */
enum SQL_LOCK_UNLOCK = 2;

enum SQL_SETPOS_MAX_LOCK_VALUE = SQL_LOCK_UNLOCK;

/* Macros for SQLSetPos */
extern (D) auto SQL_POSITION_TO(T0, T1)(auto ref T0 hstmt, auto ref T1 irow)
{
    return SQLSetPos(hstmt, irow, SQL_POSITION, SQL_LOCK_NO_CHANGE);
}

extern (D) auto SQL_LOCK_RECORD(T0, T1, T2)(auto ref T0 hstmt, auto ref T1 irow, auto ref T2 fLock)
{
    return SQLSetPos(hstmt, irow, SQL_POSITION, fLock);
}

extern (D) auto SQL_REFRESH_RECORD(T0, T1, T2)(auto ref T0 hstmt, auto ref T1 irow, auto ref T2 fLock)
{
    return SQLSetPos(hstmt, irow, SQL_REFRESH, fLock);
}

extern (D) auto SQL_UPDATE_RECORD(T0, T1)(auto ref T0 hstmt, auto ref T1 irow)
{
    return SQLSetPos(hstmt, irow, SQL_UPDATE, SQL_LOCK_NO_CHANGE);
}

extern (D) auto SQL_DELETE_RECORD(T0, T1)(auto ref T0 hstmt, auto ref T1 irow)
{
    return SQLSetPos(hstmt, irow, SQL_DELETE, SQL_LOCK_NO_CHANGE);
}

extern (D) auto SQL_ADD_RECORD(T0, T1)(auto ref T0 hstmt, auto ref T1 irow)
{
    return SQLSetPos(hstmt, irow, SQL_ADD, SQL_LOCK_NO_CHANGE);
}

/* Column types and scopes in SQLSpecialColumns.  */
enum SQL_BEST_ROWID = 1;
enum SQL_ROWVER = 2;

/* Defines for SQLSpecialColumns (returned in the result set)
   SQL_PC_UNKNOWN and SQL_PC_PSEUDO are defined in sql.h */
enum SQL_PC_NOT_PSEUDO = 1;

/* Defines for SQLStatistics */
enum SQL_QUICK = 0;
enum SQL_ENSURE = 1;

/* Defines for SQLStatistics (returned in the result set)
   SQL_INDEX_CLUSTERED, SQL_INDEX_HASHED, and SQL_INDEX_OTHER are
   defined in sql.h */
enum SQL_TABLE_STAT = 0;

/* Defines for SQLTables */
enum SQL_ALL_CATALOGS = "%";
enum SQL_ALL_SCHEMAS = "%";
enum SQL_ALL_TABLE_TYPES = "%";

/* Options for SQLDriverConnect */
enum SQL_DRIVER_NOPROMPT = 0;
enum SQL_DRIVER_COMPLETE = 1;
enum SQL_DRIVER_PROMPT = 2;
enum SQL_DRIVER_COMPLETE_REQUIRED = 3;

SQLRETURN SQLDriverConnect (
    SQLHDBC hdbc,
    SQLHWND hwnd,
    SQLCHAR* szConnStrIn,
    SQLSMALLINT cchConnStrIn,
    SQLCHAR* szConnStrOut,
    SQLSMALLINT cchConnStrOutMax,
    SQLSMALLINT* pcchConnStrOut,
    SQLUSMALLINT fDriverCompletion);

/* RC_INVOKED */

/* Level 2 Functions                             */

/* SQLExtendedFetch "fFetchType" values */
enum SQL_FETCH_BOOKMARK = 8;

/* SQLExtendedFetch "rgfRowStatus" element values */
enum SQL_ROW_SUCCESS = 0;
enum SQL_ROW_DELETED = 1;
enum SQL_ROW_UPDATED = 2;
enum SQL_ROW_NOROW = 3;
enum SQL_ROW_ADDED = 4;
enum SQL_ROW_ERROR = 5;
enum SQL_ROW_SUCCESS_WITH_INFO = 6;
enum SQL_ROW_PROCEED = 0;
enum SQL_ROW_IGNORE = 1;

/* value for SQL_DESC_ARRAY_STATUS_PTR */
enum SQL_PARAM_SUCCESS = 0;
enum SQL_PARAM_SUCCESS_WITH_INFO = 6;
enum SQL_PARAM_ERROR = 5;
enum SQL_PARAM_UNUSED = 7;
enum SQL_PARAM_DIAG_UNAVAILABLE = 1;

enum SQL_PARAM_PROCEED = 0;
enum SQL_PARAM_IGNORE = 1;

/* Defines for SQLForeignKeys (UPDATE_RULE and DELETE_RULE) */
enum SQL_CASCADE = 0;
enum SQL_RESTRICT = 1;
enum SQL_SET_NULL = 2;
enum SQL_NO_ACTION = 3;
enum SQL_SET_DEFAULT = 4;

/* Note that the following are in a different column of SQLForeignKeys than */
/* the previous #defines.   These are for DEFERRABILITY.                    */

enum SQL_INITIALLY_DEFERRED = 5;
enum SQL_INITIALLY_IMMEDIATE = 6;
enum SQL_NOT_DEFERRABLE = 7;

/* Defines for SQLBindParameter and
                           SQLProcedureColumns (returned in the result set) */
enum SQL_PARAM_TYPE_UNKNOWN = 0;
enum SQL_PARAM_INPUT = 1;
enum SQL_PARAM_INPUT_OUTPUT = 2;
enum SQL_RESULT_COL = 3;
enum SQL_PARAM_OUTPUT = 4;
enum SQL_RETURN_VALUE = 5;
enum SQL_PARAM_INPUT_OUTPUT_STREAM = 8;
enum SQL_PARAM_OUTPUT_STREAM = 16;

/* Defines for SQLProcedures (returned in the result set) */
enum SQL_PT_UNKNOWN = 0;
enum SQL_PT_PROCEDURE = 1;
enum SQL_PT_FUNCTION = 2;

/*      This define is too large for RC */
static immutable string SQL_ODBC_KEYWORDS =
"ABSOLUTE,ACTION,ADA,ADD,ALL,ALLOCATE,ALTER,AND,ANY,ARE,AS," ~
"ASC,ASSERTION,AT,AUTHORIZATION,AVG," ~
"BEGIN,BETWEEN,BIT,BIT_LENGTH,BOTH,BY,CASCADE,CASCADED,CASE,CAST,CATALOG," ~
"CHAR,CHAR_LENGTH,CHARACTER,CHARACTER_LENGTH,CHECK,CLOSE,COALESCE," ~
"COLLATE,COLLATION,COLUMN,COMMIT,CONNECT,CONNECTION,CONSTRAINT," ~
"CONSTRAINTS,CONTINUE,CONVERT,CORRESPONDING,COUNT,CREATE,CROSS,CURRENT," ~
"CURRENT_DATE,CURRENT_TIME,CURRENT_TIMESTAMP,CURRENT_USER,CURSOR," ~
"DATE,DAY,DEALLOCATE,DEC,DECIMAL,DECLARE,DEFAULT,DEFERRABLE," ~
"DEFERRED,DELETE,DESC,DESCRIBE,DESCRIPTOR,DIAGNOSTICS,DISCONNECT," ~
"DISTINCT,DOMAIN,DOUBLE,DROP," ~
"ELSE,END,END-EXEC,ESCAPE,EXCEPT,EXCEPTION,EXEC,EXECUTE," ~
"EXISTS,EXTERNAL,EXTRACT," ~
"FALSE,FETCH,FIRST,FLOAT,FOR,FOREIGN,FORTRAN,FOUND,FROM,FULL," ~
"GET,GLOBAL,GO,GOTO,GRANT,GROUP,HAVING,HOUR," ~
"IDENTITY,IMMEDIATE,IN,INCLUDE,INDEX,INDICATOR,INITIALLY,INNER," ~
"INPUT,INSENSITIVE,INSERT,INT,INTEGER,INTERSECT,INTERVAL,INTO,IS,ISOLATION," ~
"JOIN,KEY,LANGUAGE,LAST,LEADING,LEFT,LEVEL,LIKE,LOCAL,LOWER," ~
"MATCH,MAX,MIN,MINUTE,MODULE,MONTH," ~
"NAMES,NATIONAL,NATURAL,NCHAR,NEXT,NO,NONE,NOT,NULL,NULLIF,NUMERIC," ~
"OCTET_LENGTH,OF,ON,ONLY,OPEN,OPTION,OR,ORDER,OUTER,OUTPUT,OVERLAPS," ~
"PAD,PARTIAL,PASCAL,PLI,POSITION,PRECISION,PREPARE,PRESERVE," ~
"PRIMARY,PRIOR,PRIVILEGES,PROCEDURE,PUBLIC," ~
"READ,REAL,REFERENCES,RELATIVE,RESTRICT,REVOKE,RIGHT,ROLLBACK,ROWS" ~
"SCHEMA,SCROLL,SECOND,SECTION,SELECT,SESSION,SESSION_USER,SET,SIZE," ~
"SMALLINT,SOME,SPACE,SQL,SQLCA,SQLCODE,SQLERROR,SQLSTATE,SQLWARNING," ~
"SUBSTRING,SUM,SYSTEM_USER," ~
"TABLE,TEMPORARY,THEN,TIME,TIMESTAMP,TIMEZONE_HOUR,TIMEZONE_MINUTE," ~
"TO,TRAILING,TRANSACTION,TRANSLATE,TRANSLATION,TRIM,TRUE," ~
"UNION,UNIQUE,UNKNOWN,UPDATE,UPPER,USAGE,USER,USING," ~
"VALUE,VALUES,VARCHAR,VARYING,VIEW,WHEN,WHENEVER,WHERE,WITH,WORK,WRITE," ~
"YEAR,ZONE";

SQLRETURN SQLBrowseConnect (
    SQLHDBC hdbc,
    SQLCHAR* szConnStrIn,
    SQLSMALLINT cchConnStrIn,
    SQLCHAR* szConnStrOut,
    SQLSMALLINT cchConnStrOutMax,
    SQLSMALLINT* pcchConnStrOut);

SQLRETURN SQLBulkOperations (SQLHSTMT StatementHandle, SQLSMALLINT Operation);

SQLRETURN SQLColAttributes (
    SQLHSTMT hstmt,
    SQLUSMALLINT icol,
    SQLUSMALLINT fDescType,
    SQLPOINTER rgbDesc,
    SQLSMALLINT cbDescMax,
    SQLSMALLINT* pcbDesc,
    SQLLEN* pfDesc);

SQLRETURN SQLColumnPrivileges (
    SQLHSTMT hstmt,
    SQLCHAR* szCatalogName,
    SQLSMALLINT cchCatalogName,
    SQLCHAR* szSchemaName,
    SQLSMALLINT cchSchemaName,
    SQLCHAR* szTableName,
    SQLSMALLINT cchTableName,
    SQLCHAR* szColumnName,
    SQLSMALLINT cchColumnName);

SQLRETURN SQLDescribeParam (
    SQLHSTMT hstmt,
    SQLUSMALLINT ipar,
    SQLSMALLINT* pfSqlType,
    SQLULEN* pcbParamDef,
    SQLSMALLINT* pibScale,
    SQLSMALLINT* pfNullable);

SQLRETURN SQLExtendedFetch (
    SQLHSTMT hstmt,
    SQLUSMALLINT fFetchType,
    SQLLEN irow,
    SQLULEN* pcrow,
    SQLUSMALLINT* rgfRowStatus);

SQLRETURN SQLForeignKeys (
    SQLHSTMT hstmt,
    SQLCHAR* szPkCatalogName,
    SQLSMALLINT cchPkCatalogName,
    SQLCHAR* szPkSchemaName,
    SQLSMALLINT cchPkSchemaName,
    SQLCHAR* szPkTableName,
    SQLSMALLINT cchPkTableName,
    SQLCHAR* szFkCatalogName,
    SQLSMALLINT cchFkCatalogName,
    SQLCHAR* szFkSchemaName,
    SQLSMALLINT cchFkSchemaName,
    SQLCHAR* szFkTableName,
    SQLSMALLINT cchFkTableName);

SQLRETURN SQLMoreResults (SQLHSTMT hstmt);

SQLRETURN SQLNativeSql (
    SQLHDBC hdbc,
    SQLCHAR* szSqlStrIn,
    SQLINTEGER cchSqlStrIn,
    SQLCHAR* szSqlStr,
    SQLINTEGER cchSqlStrMax,
    SQLINTEGER* pcbSqlStr);

SQLRETURN SQLNumParams (SQLHSTMT hstmt, SQLSMALLINT* pcpar);

SQLRETURN SQLParamOptions (SQLHSTMT hstmt, SQLULEN crow, SQLULEN* pirow);

SQLRETURN SQLPrimaryKeys (
    SQLHSTMT hstmt,
    SQLCHAR* szCatalogName,
    SQLSMALLINT cchCatalogName,
    SQLCHAR* szSchemaName,
    SQLSMALLINT cchSchemaName,
    SQLCHAR* szTableName,
    SQLSMALLINT cchTableName);

SQLRETURN SQLProcedureColumns (
    SQLHSTMT hstmt,
    SQLCHAR* szCatalogName,
    SQLSMALLINT cchCatalogName,
    SQLCHAR* szSchemaName,
    SQLSMALLINT cchSchemaName,
    SQLCHAR* szProcName,
    SQLSMALLINT cchProcName,
    SQLCHAR* szColumnName,
    SQLSMALLINT cchColumnName);

SQLRETURN SQLProcedures (
    SQLHSTMT hstmt,
    SQLCHAR* szCatalogName,
    SQLSMALLINT cchCatalogName,
    SQLCHAR* szSchemaName,
    SQLSMALLINT cchSchemaName,
    SQLCHAR* szProcName,
    SQLSMALLINT cchProcName);

SQLRETURN SQLSetPos (
    SQLHSTMT hstmt,
    SQLSETPOSIROW irow,
    SQLUSMALLINT fOption,
    SQLUSMALLINT fLock);

SQLRETURN SQLTablePrivileges (
    SQLHSTMT hstmt,
    SQLCHAR* szCatalogName,
    SQLSMALLINT cchCatalogName,
    SQLCHAR* szSchemaName,
    SQLSMALLINT cchSchemaName,
    SQLCHAR* szTableName,
    SQLSMALLINT cchTableName);

SQLRETURN SQLDrivers (
    SQLHENV henv,
    SQLUSMALLINT fDirection,
    SQLCHAR* szDriverDesc,
    SQLSMALLINT cchDriverDescMax,
    SQLSMALLINT* pcchDriverDesc,
    SQLCHAR* szDriverAttributes,
    SQLSMALLINT cchDrvrAttrMax,
    SQLSMALLINT* pcchDrvrAttr);

SQLRETURN SQLBindParameter (
    SQLHSTMT hstmt,
    SQLUSMALLINT ipar,
    SQLSMALLINT fParamType,
    SQLSMALLINT fCType,
    SQLSMALLINT fSqlType,
    SQLULEN cbColDef,
    SQLSMALLINT ibScale,
    SQLPOINTER rgbValue,
    SQLLEN cbValueMax,
    SQLLEN* pcbValue);

/*---------------------------------------------------------*/
/* SQLAllocHandleStd is implemented to make SQLAllocHandle */
/* compatible with X/Open standard.  an application should */
/* not call SQLAllocHandleStd directly                     */
/*---------------------------------------------------------*/
/*
#ifdef ODBC_STD
#define SQLAllocHandle  SQLAllocHandleStd
#define SQLAllocEnv(phenv)  SQLAllocHandleStd(SQL_HANDLE_ENV, SQL_NULL_HANDLE, phenv)
*/
/* Internal type subcodes */
/*
#define SQL_YEAR                        SQL_CODE_YEAR
#define SQL_MONTH                       SQL_CODE_MONTH
#define SQL_DAY                         SQL_CODE_DAY
#define SQL_HOUR                        SQL_CODE_HOUR
#define SQL_MINUTE                      SQL_CODE_MINUTE
#define SQL_SECOND                      SQL_CODE_SECOND
#define SQL_YEAR_TO_MONTH               SQL_CODE_YEAR_TO_MONTH
#define SQL_DAY_TO_HOUR                 SQL_CODE_DAY_TO_HOUR
#define SQL_DAY_TO_MINUTE               SQL_CODE_DAY_TO_MINUTE
#define SQL_DAY_TO_SECOND               SQL_CODE_DAY_TO_SECOND
#define SQL_HOUR_TO_MINUTE              SQL_CODE_HOUR_TO_MINUTE
#define SQL_HOUR_TO_SECOND              SQL_CODE_HOUR_TO_SECOND
#define SQL_MINUTE_TO_SECOND            SQL_CODE_MINUTE_TO_SECOND
#endif
*/

SQLRETURN SQLAllocHandleStd (
    SQLSMALLINT fHandleType,
    SQLHANDLE hInput,
    SQLHANDLE* phOutput);

/*      Deprecated defines from prior versions of ODBC */
enum SQL_DATABASE_NAME = 16; /* Use SQLGetConnectOption/SQL_CURRENT_QUALIFIER */
enum SQL_FD_FETCH_PREV = SQL_FD_FETCH_PRIOR;
enum SQL_FETCH_PREV = SQL_FETCH_PRIOR;
enum SQL_CONCUR_TIMESTAMP = SQL_CONCUR_ROWVER;
enum SQL_SCCO_OPT_TIMESTAMP = SQL_SCCO_OPT_ROWVER;
enum SQL_CC_DELETE = SQL_CB_DELETE;
enum SQL_CR_DELETE = SQL_CB_DELETE;
enum SQL_CC_CLOSE = SQL_CB_CLOSE;
enum SQL_CR_CLOSE = SQL_CB_CLOSE;
enum SQL_CC_PRESERVE = SQL_CB_PRESERVE;
enum SQL_CR_PRESERVE = SQL_CB_PRESERVE;
/* SQL_FETCH_RESUME is not supported by 2.0+ drivers
#define SQL_FETCH_RESUME                7
*/
enum SQL_SCROLL_FORWARD_ONLY = 0L; /*-SQL_CURSOR_FORWARD_ONLY */
enum SQL_SCROLL_KEYSET_DRIVEN = -1L; /*-SQL_CURSOR_KEYSET_DRIVEN */
enum SQL_SCROLL_DYNAMIC = -2L; /*-SQL_CURSOR_DYNAMIC */
enum SQL_SCROLL_STATIC = -3L; /*-SQL_CURSOR_STATIC */

/*      Deprecated functions from prior versions of ODBC */ /*      Use SQLSetStmtOptions */
SQLRETURN SQLSetScrollOptions (
    SQLHSTMT hstmt,
    SQLUSMALLINT fConcurrency,
    SQLLEN crowKeyset,
    SQLUSMALLINT crowRowset);

/* Tracing section */

enum TRACE_VERSION = 1000; /* Version of trace API */

// open a trace log file
RETCODE TraceOpenLogFile (
    LPWSTR szFileName,
    LPWSTR lpwszOutputMsg,
    DWORD cbOutputMsg);

RETCODE TraceCloseLogFile (); // Request to close a trace log
VOID TraceReturn (RETCODE, RETCODE); // Processes trace after FN is called
DWORD TraceVersion (); // Returns trace API version

/* Functions for Visual Studio Analyzer*/
/* to turn on/off tracing or VS events, call TraceVSControl by setting or clearing the following bits  */
enum TRACE_ON = 0x00000001L;
enum TRACE_VS_EVENT_ON = 0x00000002L;

RETCODE TraceVSControl (DWORD);

/* Functions for setting the connection pooling failure detection code */
/* The "TryWait" value is the time (in seconds) that the DM will wait  */
/* between detecting that a connection is dead (using                  */
/* SQL_ATTR_CONNECTION_DEAD) and retrying the connection.  During that */
/* interval, connection requests will get "The server appears to be    */
/* dead" error returns.                                                */

BOOL ODBCSetTryWaitValue (DWORD dwValue); /* In seconds */
DWORD ODBCGetTryWaitValue (); /* In Milliseconds(!) */

//------------- Visual Studio Analyzer Support is removed from ODBC (Windows 8 and onwards) ---------
// From Windows 8 and onwards, Visual Studio Analyzer Support for ODBC is removed. Third-party trace 
// library does not need to define the function FireVSDebugEvent any more, which would not be called 
// from ODBC DM in Windows 8. 
// If your trace library is going to work on downlevel platforms, you may still want to define the 
// function FireVSDebugEvent. But the trace library can still be loaded on downlevel platforms even 
// if this function is not defined.
// 

// the flags in ODBC_VS_ARGS 
enum ODBC_VS_FLAG_UNICODE_ARG = 0x00000001L; /* the argument is unicode */
enum ODBC_VS_FLAG_UNICODE_COR = 0x00000002L; /* the correlation is unicode */
enum ODBC_VS_FLAG_RETCODE = 0x00000004L; /* RetCode field is set */
enum ODBC_VS_FLAG_STOP = 0x00000008L; /* Stop firing visual studio analyzer events */

struct tagODBC_VS_ARGS
{
    const(GUID)* pguidEvent; /* the GUID for event */
    DWORD dwFlags; /* flags for the call */
    union
    {
        WCHAR* wszArg;
        CHAR* szArg;
    }

    union
    {
        WCHAR* wszCorrelation;
        CHAR* szCorrelation;
    }

    RETCODE RetCode;
}

alias ODBC_VS_ARGS = tagODBC_VS_ARGS;
alias PODBC_VS_ARGS = tagODBC_VS_ARGS*;

VOID FireVSDebugEvent (PODBC_VS_ARGS);
